<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/DebtManager.Infrastructure/Configuration/AppConfigService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Infrastructure/Configuration/AppConfigService.cs" />
              <option name="originalContent" value="using DebtManager.Contracts.Configuration;&#10;using DebtManager.Infrastructure.Persistence;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace DebtManager.Infrastructure.Configuration;&#10;&#10;public class AppConfigService : IAppConfigService&#10;{&#10;    private readonly AppDbContext _db;&#10;    private readonly MemoryCache&lt;string, (string? value, bool isSecret)&gt; _cache = new();&#10;&#10;    public AppConfigService(AppDbContext db)&#10;    {&#10;        _db = db;&#10;    }&#10;&#10;    public async Task&lt;string?&gt; GetAsync(string key, CancellationToken ct = default)&#10;    {&#10;        if (_cache.TryGet(key, out var v)) return v.value;&#10;        var entry = await _db.AppConfigEntries.AsNoTracking().FirstOrDefaultAsync(e =&gt; e.Key == key, ct);&#10;        var tuple = (entry?.Value, entry?.IsSecret ?? false);&#10;        _cache.Set(key, tuple, TimeSpan.FromMinutes(5));&#10;        return tuple.Item1;&#10;    }&#10;&#10;    public async Task&lt;T?&gt; GetAsync&lt;T&gt;(string key, CancellationToken ct = default)&#10;    {&#10;        var raw = await GetAsync(key, ct);&#10;        if (raw is null) return default;&#10;        try&#10;        {&#10;            return (T?)Convert.ChangeType(raw, typeof(T));&#10;        }&#10;        catch&#10;        {&#10;            return default;&#10;        }&#10;    }&#10;&#10;    public async Task SetAsync(string key, string? value, bool isSecret = false, CancellationToken ct = default)&#10;    {&#10;        var entry = await _db.AppConfigEntries.FirstOrDefaultAsync(e =&gt; e.Key == key, ct);&#10;        if (entry == null)&#10;        {&#10;            _db.AppConfigEntries.Add(new Domain.Configuration.AppConfigEntry(key, value, isSecret));&#10;        }&#10;        else&#10;        {&#10;            entry.Update(value, isSecret);&#10;        }&#10;        await _db.SaveChangesAsync(ct);&#10;        _cache.Remove(key);&#10;    }&#10;&#10;    public async Task&lt;bool&gt; ExistsAsync(string key, CancellationToken ct = default)&#10;    {&#10;        return await _db.AppConfigEntries.AnyAsync(e =&gt; e.Key == key, ct);&#10;    }&#10;&#10;    public async Task&lt;IDictionary&lt;string, (string? value, bool isSecret)&gt;&gt; GetAllAsync(CancellationToken ct = default)&#10;    {&#10;        var list = await _db.AppConfigEntries.AsNoTracking().ToListAsync(ct);&#10;        return list.ToDictionary(e =&gt; e.Key, e =&gt; (e.Value, e.IsSecret));&#10;    }&#10;&#10;    public async Task DeleteAsync(string key, CancellationToken ct = default)&#10;    {&#10;        var entry = await _db.AppConfigEntries.FirstOrDefaultAsync(e =&gt; e.Key == key, ct);&#10;        if (entry != null)&#10;        {&#10;            _db.AppConfigEntries.Remove(entry);&#10;            await _db.SaveChangesAsync(ct);&#10;            _cache.Remove(key);&#10;        }&#10;    }&#10;&#10;    // Simple in-memory cache helper&#10;    private sealed class MemoryCache&lt;TKey, TValue&gt;&#10;        where TKey : notnull&#10;    {&#10;        private readonly Dictionary&lt;TKey, (DateTimeOffset expires, TValue value)&gt; _store = new();&#10;        public bool TryGet(TKey key, out TValue value)&#10;        {&#10;            if (_store.TryGetValue(key, out var tuple))&#10;            {&#10;                if (tuple.expires &gt; DateTimeOffset.UtcNow)&#10;                {&#10;                    value = tuple.value;&#10;                    return true;&#10;                }&#10;                _store.Remove(key);&#10;            }&#10;            value = default!;&#10;            return false;&#10;        }&#10;        public void Set(TKey key, TValue value, TimeSpan ttl)&#10;        {&#10;            _store[key] = (DateTimeOffset.UtcNow.Add(ttl), value);&#10;        }&#10;        public void Remove(TKey key) =&gt; _store.Remove(key);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using DebtManager.Contracts.Configuration;&#10;using DebtManager.Infrastructure.Persistence;&#10;using Microsoft.EntityFrameworkCore;&#10;using Microsoft.Extensions.Caching.Distributed;&#10;using System.Text.Json;&#10;&#10;namespace DebtManager.Infrastructure.Configuration;&#10;&#10;public class AppConfigService : IAppConfigService&#10;{&#10;    private readonly AppDbContext _db;&#10;    private readonly IDistributedCache? _distributedCache;&#10;    private readonly MemoryCache&lt;string, (string? value, bool isSecret)&gt; _cache = new();&#10;&#10;    public AppConfigService(AppDbContext db, IDistributedCache? distributedCache = null)&#10;    {&#10;        _db = db;&#10;        _distributedCache = distributedCache;&#10;    }&#10;&#10;    public async Task&lt;string?&gt; GetAsync(string key, CancellationToken ct = default)&#10;    {&#10;        // Prefer distributed cache if available&#10;        if (_distributedCache != null)&#10;        {&#10;            var cached = await _distributedCache.GetStringAsync(CacheKey(key), ct);&#10;            if (cached != null)&#10;            {&#10;                try&#10;                {&#10;                    var parsed = JsonSerializer.Deserialize&lt;CacheDto&gt;(cached);&#10;                    return parsed?.Value;&#10;                }&#10;                catch { /* ignore cache decode errors */ }&#10;            }&#10;        }&#10;&#10;        if (_cache.TryGet(key, out var v)) return v.value;&#10;&#10;        var entry = await _db.AppConfigEntries.AsNoTracking().FirstOrDefaultAsync(e =&gt; e.Key == key, ct);&#10;        var tuple = (entry?.Value, entry?.IsSecret ?? false);&#10;&#10;        // Set caches&#10;        _cache.Set(key, tuple, TimeSpan.FromMinutes(5));&#10;        if (_distributedCache != null)&#10;        {&#10;            var dto = new CacheDto { Value = tuple.Item1, IsSecret = tuple.Item2 };&#10;            var json = JsonSerializer.Serialize(dto);&#10;            await _distributedCache.SetStringAsync(CacheKey(key), json, new DistributedCacheEntryOptions&#10;            {&#10;                AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10)&#10;            }, ct);&#10;        }&#10;        return tuple.Item1;&#10;    }&#10;&#10;    public async Task&lt;T?&gt; GetAsync&lt;T&gt;(string key, CancellationToken ct = default)&#10;    {&#10;        var raw = await GetAsync(key, ct);&#10;        if (raw is null) return default;&#10;        try&#10;        {&#10;            return (T?)Convert.ChangeType(raw, typeof(T));&#10;        }&#10;        catch&#10;        {&#10;            return default;&#10;        }&#10;    }&#10;&#10;    public async Task SetAsync(string key, string? value, bool isSecret = false, CancellationToken ct = default)&#10;    {&#10;        var entry = await _db.AppConfigEntries.FirstOrDefaultAsync(e =&gt; e.Key == key, ct);&#10;        if (entry == null)&#10;        {&#10;            _db.AppConfigEntries.Add(new Domain.Configuration.AppConfigEntry(key, value, isSecret));&#10;        }&#10;        else&#10;        {&#10;            entry.Update(value, isSecret);&#10;        }&#10;        await _db.SaveChangesAsync(ct);&#10;&#10;        // Invalidate caches&#10;        _cache.Remove(key);&#10;        if (_distributedCache != null)&#10;        {&#10;            await _distributedCache.RemoveAsync(CacheKey(key), ct);&#10;        }&#10;    }&#10;&#10;    public async Task&lt;bool&gt; ExistsAsync(string key, CancellationToken ct = default)&#10;    {&#10;        return await _db.AppConfigEntries.AnyAsync(e =&gt; e.Key == key, ct);&#10;    }&#10;&#10;    public async Task&lt;IDictionary&lt;string, (string? value, bool isSecret)&gt;&gt; GetAllAsync(CancellationToken ct = default)&#10;    {&#10;        var list = await _db.AppConfigEntries.AsNoTracking().ToListAsync(ct);&#10;        return list.ToDictionary(e =&gt; e.Key, e =&gt; (e.Value, e.IsSecret));&#10;    }&#10;&#10;    public async Task DeleteAsync(string key, CancellationToken ct = default)&#10;    {&#10;        var entry = await _db.AppConfigEntries.FirstOrDefaultAsync(e =&gt; e.Key == key, ct);&#10;        if (entry != null)&#10;        {&#10;            _db.AppConfigEntries.Remove(entry);&#10;            await _db.SaveChangesAsync(ct);&#10;            _cache.Remove(key);&#10;            if (_distributedCache != null)&#10;            {&#10;                await _distributedCache.RemoveAsync(CacheKey(key), ct);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static string CacheKey(string key) =&gt; $&quot;appcfg:{key}&quot;;&#10;&#10;    private sealed class CacheDto&#10;    {&#10;        public string? Value { get; set; }&#10;        public bool IsSecret { get; set; }&#10;    }&#10;&#10;    // Simple in-memory cache helper&#10;    private sealed class MemoryCache&lt;TKey, TValue&gt;&#10;        where TKey : notnull&#10;    {&#10;        private readonly Dictionary&lt;TKey, (DateTimeOffset expires, TValue value)&gt; _store = new();&#10;        public bool TryGet(TKey key, out TValue value)&#10;        {&#10;            if (_store.TryGetValue(key, out var tuple))&#10;            {&#10;                if (tuple.expires &gt; DateTimeOffset.UtcNow)&#10;                {&#10;                    value = tuple.value;&#10;                    return true;&#10;                }&#10;                _store.Remove(key);&#10;            }&#10;            value = default!;&#10;            return false;&#10;        }&#10;        public void Set(TKey key, TValue value, TimeSpan ttl)&#10;        {&#10;            _store[key] = (DateTimeOffset.UtcNow.Add(ttl), value);&#10;        }&#10;        public void Remove(TKey key) =&gt; _store.Remove(key);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Infrastructure/Migrations/20251005035833_AddInvoiceProcessingAndMetrics.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Infrastructure/Migrations/20251005035833_AddInvoiceProcessingAndMetrics.cs" />
              <option name="originalContent" value="using System;&#10;using Microsoft.EntityFrameworkCore.Migrations;&#10;&#10;#nullable disable&#10;&#10;namespace DebtManager.Infrastructure.Migrations&#10;{&#10;    /// &lt;inheritdoc /&gt;&#10;    public partial class AddInvoiceProcessingAndMetrics : Migration&#10;    {&#10;        /// &lt;inheritdoc /&gt;&#10;        protected override void Up(MigrationBuilder migrationBuilder)&#10;        {&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AdminUsers&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Email = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: false),&#10;                    Name = table.Column&lt;string&gt;(type: &quot;nvarchar(200)&quot;, maxLength: 200, nullable: false),&#10;                    ExternalAuthId = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: false),&#10;                    Role = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    LastLoginUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    IsActive = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    AssignedByAdminId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AdminUsers&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AppConfigEntries&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Key = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: false),&#10;                    Value = table.Column&lt;string&gt;(type: &quot;nvarchar(4000)&quot;, maxLength: 4000, nullable: true),&#10;                    IsSecret = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AppConfigEntries&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Articles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Title = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: false),&#10;                    Slug = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: false),&#10;                    Content = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Excerpt = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    HeaderImageUrl = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    AuthorName = table.Column&lt;string&gt;(type: &quot;nvarchar(200)&quot;, maxLength: 200, nullable: true),&#10;                    IsPublished = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    PublishedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    ViewCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    MetaDescription = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: true),&#10;                    MetaKeywords = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Articles&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetRoles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Name = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    NormalizedName = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    ConcurrencyStamp = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetRoles&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUsers&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ExternalAuthId = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    TotpEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    TotpSecretKey = table.Column&lt;string&gt;(type: &quot;nvarchar(512)&quot;, maxLength: 512, nullable: true),&#10;                    TotpRecoveryCodes = table.Column&lt;string&gt;(type: &quot;nvarchar(2000)&quot;, maxLength: 2000, nullable: true),&#10;                    UserName = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    NormalizedUserName = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    Email = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    NormalizedEmail = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    EmailConfirmed = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    PasswordHash = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    SecurityStamp = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ConcurrencyStamp = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    PhoneNumber = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    PhoneNumberConfirmed = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    TwoFactorEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    LockoutEnd = table.Column&lt;DateTimeOffset&gt;(type: &quot;datetimeoffset&quot;, nullable: true),&#10;                    LockoutEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    AccessFailedCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUsers&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Metrics&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Key = table.Column&lt;string&gt;(type: &quot;nvarchar(200)&quot;, maxLength: 200, nullable: false),&#10;                    Type = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Value = table.Column&lt;decimal&gt;(type: &quot;decimal(18,4)&quot;, precision: 18, scale: 4, nullable: false),&#10;                    Tags = table.Column&lt;string&gt;(type: &quot;nvarchar(1000)&quot;, maxLength: 1000, nullable: true),&#10;                    RecordedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Metrics&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Organizations&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Name = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    LegalName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    TradingName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Subdomain = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: true),&#10;                    Abn = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    DefaultCurrency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PrimaryColorHex = table.Column&lt;string&gt;(type: &quot;nvarchar(16)&quot;, maxLength: 16, nullable: false),&#10;                    SecondaryColorHex = table.Column&lt;string&gt;(type: &quot;nvarchar(16)&quot;, maxLength: 16, nullable: false),&#10;                    SupportEmail = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    SupportPhone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    BillingContactName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    BillingContactEmail = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    BillingContactPhone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Timezone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    LogoUrl = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    FaviconUrl = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    StatementFooter = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    BrandTagline = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    IsApproved = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    ApprovedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    OnboardedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    NextReconciliationAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LastBrandRefreshAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Organizations&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetRoleClaims&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false)&#10;                        .Annotation(&quot;SqlServer:Identity&quot;, &quot;1, 1&quot;),&#10;                    RoleId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ClaimType = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ClaimValue = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetRoleClaims&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetRoleClaims_AspNetRoles_RoleId&quot;,&#10;                        column: x =&gt; x.RoleId,&#10;                        principalTable: &quot;AspNetRoles&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserClaims&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false)&#10;                        .Annotation(&quot;SqlServer:Identity&quot;, &quot;1, 1&quot;),&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ClaimType = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ClaimValue = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserClaims&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserClaims_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserLogins&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    LoginProvider = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ProviderKey = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ProviderDisplayName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserLogins&quot;, x =&gt; new { x.LoginProvider, x.ProviderKey });&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserLogins_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserRoles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    RoleId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserRoles&quot;, x =&gt; new { x.UserId, x.RoleId });&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserRoles_AspNetRoles_RoleId&quot;,&#10;                        column: x =&gt; x.RoleId,&#10;                        principalTable: &quot;AspNetRoles&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserRoles_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserTokens&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    LoginProvider = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Name = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Value = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserTokens&quot;, x =&gt; new { x.UserId, x.LoginProvider, x.Name });&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserTokens_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Debtors&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ReferenceId = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Email = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Phone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    AlternatePhone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    FirstName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    LastName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PreferredName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    DateOfBirth = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    PreferredContactMethod = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    AddressLine1 = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    AddressLine2 = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    City = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    State = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PostalCode = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CountryCode = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    GovernmentId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    EmployerName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    IncomeBracket = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PortalAccessEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    LastLoginAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LastContactedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    TagsCsv = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Debtors&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Debtors_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Debts&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ExternalAccountId = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ClientReferenceNumber = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    PortfolioCode = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Category = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Currency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    OriginalPrincipal = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    OutstandingPrincipal = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    AccruedInterest = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    AccruedFees = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    InterestRateAnnualPercentage = table.Column&lt;decimal&gt;(type: &quot;decimal(9,6)&quot;, precision: 9, scale: 6, nullable: true),&#10;                    InterestCalculationMethod = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    LateFeeFlat = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    LateFeePercentage = table.Column&lt;decimal&gt;(type: &quot;decimal(9,6)&quot;, precision: 9, scale: 6, nullable: true),&#10;                    OpenedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    DueDateUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LastPaymentAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    NextActionAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    ClosedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    WriteOffReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    DisputeReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    AssignedCollectorUserId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    SettlementOfferAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    SettlementOfferExpiresAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    GraceDays = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Debts&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Debts_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Debts_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Documents&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    FileName = table.Column&lt;string&gt;(type: &quot;nvarchar(400)&quot;, maxLength: 400, nullable: false),&#10;                    ContentType = table.Column&lt;string&gt;(type: &quot;nvarchar(200)&quot;, maxLength: 200, nullable: false),&#10;                    SizeBytes = table.Column&lt;long&gt;(type: &quot;bigint&quot;, nullable: false),&#10;                    StoragePath = table.Column&lt;string&gt;(type: &quot;nvarchar(1000)&quot;, maxLength: 1000, nullable: false),&#10;                    Sha256 = table.Column&lt;string&gt;(type: &quot;nvarchar(128)&quot;, maxLength: 128, nullable: true),&#10;                    Type = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Documents&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Documents_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Documents_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;UserProfiles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    FirstName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    LastName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_UserProfiles&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_UserProfiles_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_UserProfiles_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_UserProfiles_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;PaymentPlans&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Reference = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Type = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Frequency = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    StartDateUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    EndDateUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    InstallmentAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    InstallmentCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    TotalPayable = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    DiscountAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    DownPaymentAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    DownPaymentDueAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    GracePeriodInDays = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    RequiresManualReview = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CancellationReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    CancelledAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    DefaultedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    CreatedByUserId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ApprovedByUserId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_PaymentPlans&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_PaymentPlans_Debts_DebtId&quot;,&#10;                        column: x =&gt; x.DebtId,&#10;                        principalTable: &quot;Debts&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;InvoiceData&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DocumentId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    InvoiceNumber = table.Column&lt;string&gt;(type: &quot;nvarchar(100)&quot;, maxLength: 100, nullable: true),&#10;                    InvoiceDate = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    DueDate = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    TotalAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    Currency = table.Column&lt;string&gt;(type: &quot;nvarchar(10)&quot;, maxLength: 10, nullable: true),&#10;                    VendorName = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: true),&#10;                    VendorAddress = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    VendorAbn = table.Column&lt;string&gt;(type: &quot;nvarchar(50)&quot;, maxLength: 50, nullable: true),&#10;                    CustomerName = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: true),&#10;                    CustomerAddress = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    ExtractedDataJson = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ProcessedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    ErrorMessage = table.Column&lt;string&gt;(type: &quot;nvarchar(2000)&quot;, maxLength: 2000, nullable: true),&#10;                    RetryCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    ConfidenceScore = table.Column&lt;decimal&gt;(type: &quot;decimal(5,4)&quot;, precision: 5, scale: 4, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_InvoiceData&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_InvoiceData_Documents_DocumentId&quot;,&#10;                        column: x =&gt; x.DocumentId,&#10;                        principalTable: &quot;Documents&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;PaymentInstallments&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    PaymentPlanId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Sequence = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    DueAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    AmountDue = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    AmountPaid = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    PaidAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LateFeeAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    TransactionReference = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_PaymentInstallments&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_PaymentInstallments_PaymentPlans_PaymentPlanId&quot;,&#10;                        column: x =&gt; x.PaymentPlanId,&#10;                        principalTable: &quot;PaymentPlans&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Transactions&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    PaymentPlanId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    PaymentInstallmentId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    Amount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    Currency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Direction = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Method = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Provider = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    ProviderRef = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ProcessedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    SettledAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    FailureReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    FeeAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    FeeCurrency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    MetadataJson = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Transactions&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_Debts_DebtId&quot;,&#10;                        column: x =&gt; x.DebtId,&#10;                        principalTable: &quot;Debts&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_PaymentInstallments_PaymentInstallmentId&quot;,&#10;                        column: x =&gt; x.PaymentInstallmentId,&#10;                        principalTable: &quot;PaymentInstallments&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_PaymentPlans_PaymentPlanId&quot;,&#10;                        column: x =&gt; x.PaymentPlanId,&#10;                        principalTable: &quot;PaymentPlans&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AdminUsers_Email&quot;,&#10;                table: &quot;AdminUsers&quot;,&#10;                column: &quot;Email&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AdminUsers_ExternalAuthId&quot;,&#10;                table: &quot;AdminUsers&quot;,&#10;                column: &quot;ExternalAuthId&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AppConfigEntries_Key&quot;,&#10;                table: &quot;AppConfigEntries&quot;,&#10;                column: &quot;Key&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Articles_Slug&quot;,&#10;                table: &quot;Articles&quot;,&#10;                column: &quot;Slug&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetRoleClaims_RoleId&quot;,&#10;                table: &quot;AspNetRoleClaims&quot;,&#10;                column: &quot;RoleId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;RoleNameIndex&quot;,&#10;                table: &quot;AspNetRoles&quot;,&#10;                column: &quot;NormalizedName&quot;,&#10;                unique: true,&#10;                filter: &quot;[NormalizedName] IS NOT NULL&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUserClaims_UserId&quot;,&#10;                table: &quot;AspNetUserClaims&quot;,&#10;                column: &quot;UserId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUserLogins_UserId&quot;,&#10;                table: &quot;AspNetUserLogins&quot;,&#10;                column: &quot;UserId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUserRoles_RoleId&quot;,&#10;                table: &quot;AspNetUserRoles&quot;,&#10;                column: &quot;RoleId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;EmailIndex&quot;,&#10;                table: &quot;AspNetUsers&quot;,&#10;                column: &quot;NormalizedEmail&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUsers_ExternalAuthId&quot;,&#10;                table: &quot;AspNetUsers&quot;,&#10;                column: &quot;ExternalAuthId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;UserNameIndex&quot;,&#10;                table: &quot;AspNetUsers&quot;,&#10;                column: &quot;NormalizedUserName&quot;,&#10;                unique: true,&#10;                filter: &quot;[NormalizedUserName] IS NOT NULL&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debtors_OrganizationId_Email&quot;,&#10;                table: &quot;Debtors&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;Email&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debtors_ReferenceId&quot;,&#10;                table: &quot;Debtors&quot;,&#10;                column: &quot;ReferenceId&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debts_DebtorId&quot;,&#10;                table: &quot;Debts&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debts_ExternalAccountId&quot;,&#10;                table: &quot;Debts&quot;,&#10;                column: &quot;ExternalAccountId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debts_OrganizationId_ClientReferenceNumber&quot;,&#10;                table: &quot;Debts&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;ClientReferenceNumber&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Documents_DebtorId&quot;,&#10;                table: &quot;Documents&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Documents_OrganizationId_DebtorId_Type&quot;,&#10;                table: &quot;Documents&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;DebtorId&quot;, &quot;Type&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_InvoiceData_DocumentId&quot;,&#10;                table: &quot;InvoiceData&quot;,&#10;                column: &quot;DocumentId&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_InvoiceData_Status&quot;,&#10;                table: &quot;InvoiceData&quot;,&#10;                column: &quot;Status&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Metrics_Key&quot;,&#10;                table: &quot;Metrics&quot;,&#10;                column: &quot;Key&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Metrics_OrganizationId_RecordedAtUtc&quot;,&#10;                table: &quot;Metrics&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;RecordedAtUtc&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Metrics_RecordedAtUtc&quot;,&#10;                table: &quot;Metrics&quot;,&#10;                column: &quot;RecordedAtUtc&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Organizations_Abn&quot;,&#10;                table: &quot;Organizations&quot;,&#10;                column: &quot;Abn&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Organizations_Subdomain&quot;,&#10;                table: &quot;Organizations&quot;,&#10;                column: &quot;Subdomain&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_PaymentInstallments_PaymentPlanId_Sequence&quot;,&#10;                table: &quot;PaymentInstallments&quot;,&#10;                columns: new[] { &quot;PaymentPlanId&quot;, &quot;Sequence&quot; },&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_PaymentPlans_DebtId&quot;,&#10;                table: &quot;PaymentPlans&quot;,&#10;                column: &quot;DebtId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_PaymentPlans_Reference&quot;,&#10;                table: &quot;PaymentPlans&quot;,&#10;                column: &quot;Reference&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_DebtId_ProcessedAtUtc&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                columns: new[] { &quot;DebtId&quot;, &quot;ProcessedAtUtc&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_DebtorId&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_PaymentInstallmentId&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;PaymentInstallmentId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_PaymentPlanId&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;PaymentPlanId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_ProviderRef&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;ProviderRef&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_UserProfiles_DebtorId&quot;,&#10;                table: &quot;UserProfiles&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_UserProfiles_OrganizationId&quot;,&#10;                table: &quot;UserProfiles&quot;,&#10;                column: &quot;OrganizationId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_UserProfiles_UserId&quot;,&#10;                table: &quot;UserProfiles&quot;,&#10;                column: &quot;UserId&quot;,&#10;                unique: true);&#10;        }&#10;&#10;        /// &lt;inheritdoc /&gt;&#10;        protected override void Down(MigrationBuilder migrationBuilder)&#10;        {&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AdminUsers&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AppConfigEntries&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Articles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetRoleClaims&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserClaims&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserLogins&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserRoles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserTokens&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;InvoiceData&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Metrics&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Transactions&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;UserProfiles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetRoles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Documents&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;PaymentInstallments&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUsers&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;PaymentPlans&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Debts&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Debtors&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Organizations&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using Microsoft.EntityFrameworkCore.Migrations;&#10;&#10;#nullable disable&#10;&#10;namespace DebtManager.Infrastructure.Migrations&#10;{&#10;    /// &lt;inheritdoc /&gt;&#10;    public partial class AddInvoiceProcessingAndMetrics : Migration&#10;    {&#10;        /// &lt;inheritdoc /&gt;&#10;        protected override void Up(MigrationBuilder migrationBuilder)&#10;        {&#10;            // Ensure AdminUsers table exists without failing if it already exists&#10;            migrationBuilder.Sql(@&quot;&#10;IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = 'AdminUsers' AND schema_id = SCHEMA_ID('dbo'))&#10;BEGIN&#10;    CREATE TABLE [dbo].[AdminUsers] (&#10;        [Id] uniqueidentifier NOT NULL,&#10;        [Email] nvarchar(256) NOT NULL,&#10;        [Name] nvarchar(200) NOT NULL,&#10;        [ExternalAuthId] nvarchar(256) NOT NULL,&#10;        [Role] int NOT NULL,&#10;        [LastLoginUtc] datetime2 NULL,&#10;        [IsActive] bit NOT NULL,&#10;        [AssignedByAdminId] uniqueidentifier NULL,&#10;        [CreatedAtUtc] datetime2 NOT NULL,&#10;        [UpdatedAtUtc] datetime2 NULL,&#10;        CONSTRAINT [PK_AdminUsers] PRIMARY KEY ([Id])&#10;    );&#10;END&#10;&quot;);&#10;&#10;            // Ensure unique indexes exist without failing if they already exist&#10;            migrationBuilder.Sql(@&quot;&#10;IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'IX_AdminUsers_Email' AND object_id = OBJECT_ID(N'[dbo].[AdminUsers]'))&#10;BEGIN&#10;    CREATE UNIQUE INDEX [IX_AdminUsers_Email] ON [dbo].[AdminUsers]([Email]);&#10;END&#10;&quot;);&#10;&#10;            migrationBuilder.Sql(@&quot;&#10;IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'IX_AdminUsers_ExternalAuthId' AND object_id = OBJECT_ID(N'[dbo].[AdminUsers]'))&#10;BEGIN&#10;    CREATE UNIQUE INDEX [IX_AdminUsers_ExternalAuthId] ON [dbo].[AdminUsers]([ExternalAuthId]);&#10;END&#10;&quot;);&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AppConfigEntries&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Key = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: false),&#10;                    Value = table.Column&lt;string&gt;(type: &quot;nvarchar(4000)&quot;, maxLength: 4000, nullable: true),&#10;                    IsSecret = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AppConfigEntries&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Articles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Title = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: false),&#10;                    Slug = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: false),&#10;                    Content = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Excerpt = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    HeaderImageUrl = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    AuthorName = table.Column&lt;string&gt;(type: &quot;nvarchar(200)&quot;, maxLength: 200, nullable: true),&#10;                    IsPublished = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    PublishedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    ViewCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    MetaDescription = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: true),&#10;                    MetaKeywords = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Articles&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetRoles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Name = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    NormalizedName = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    ConcurrencyStamp = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetRoles&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUsers&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ExternalAuthId = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    TotpEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    TotpSecretKey = table.Column&lt;string&gt;(type: &quot;nvarchar(512)&quot;, maxLength: 512, nullable: true),&#10;                    TotpRecoveryCodes = table.Column&lt;string&gt;(type: &quot;nvarchar(2000)&quot;, maxLength: 2000, nullable: true),&#10;                    UserName = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    NormalizedUserName = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    Email = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    NormalizedEmail = table.Column&lt;string&gt;(type: &quot;nvarchar(256)&quot;, maxLength: 256, nullable: true),&#10;                    EmailConfirmed = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    PasswordHash = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    SecurityStamp = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ConcurrencyStamp = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    PhoneNumber = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    PhoneNumberConfirmed = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    TwoFactorEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    LockoutEnd = table.Column&lt;DateTimeOffset&gt;(type: &quot;datetimeoffset&quot;, nullable: true),&#10;                    LockoutEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    AccessFailedCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUsers&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Metrics&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Key = table.Column&lt;string&gt;(type: &quot;nvarchar(200)&quot;, maxLength: 200, nullable: false),&#10;                    Type = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Value = table.Column&lt;decimal&gt;(type: &quot;decimal(18,4)&quot;, precision: 18, scale: 4, nullable: false),&#10;                    Tags = table.Column&lt;string&gt;(type: &quot;nvarchar(1000)&quot;, maxLength: 1000, nullable: true),&#10;                    RecordedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Metrics&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Organizations&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Name = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    LegalName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    TradingName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Subdomain = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: true),&#10;                    Abn = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    DefaultCurrency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PrimaryColorHex = table.Column&lt;string&gt;(type: &quot;nvarchar(16)&quot;, maxLength: 16, nullable: false),&#10;                    SecondaryColorHex = table.Column&lt;string&gt;(type: &quot;nvarchar(16)&quot;, maxLength: 16, nullable: false),&#10;                    SupportEmail = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    SupportPhone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    BillingContactName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    BillingContactEmail = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    BillingContactPhone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Timezone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    LogoUrl = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    FaviconUrl = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    StatementFooter = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    BrandTagline = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    IsApproved = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    ApprovedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    OnboardedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    NextReconciliationAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LastBrandRefreshAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Organizations&quot;, x =&gt; x.Id);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetRoleClaims&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false)&#10;                        .Annotation(&quot;SqlServer:Identity&quot;, &quot;1, 1&quot;),&#10;                    RoleId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ClaimType = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ClaimValue = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetRoleClaims&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetRoleClaims_AspNetRoles_RoleId&quot;,&#10;                        column: x =&gt; x.RoleId,&#10;                        principalTable: &quot;AspNetRoles&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserClaims&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false)&#10;                        .Annotation(&quot;SqlServer:Identity&quot;, &quot;1, 1&quot;),&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ClaimType = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ClaimValue = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserClaims&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserClaims_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserLogins&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    LoginProvider = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ProviderKey = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ProviderDisplayName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserLogins&quot;, x =&gt; new { x.LoginProvider, x.ProviderKey });&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserLogins_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserRoles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    RoleId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserRoles&quot;, x =&gt; new { x.UserId, x.RoleId });&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserRoles_AspNetRoles_RoleId&quot;,&#10;                        column: x =&gt; x.RoleId,&#10;                        principalTable: &quot;AspNetRoles&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserRoles_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;AspNetUserTokens&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    LoginProvider = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Name = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Value = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_AspNetUserTokens&quot;, x =&gt; new { x.UserId, x.LoginProvider, x.Name });&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_AspNetUserTokens_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Debtors&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ReferenceId = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Email = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Phone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    AlternatePhone = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    FirstName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    LastName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PreferredName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    DateOfBirth = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    PreferredContactMethod = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    AddressLine1 = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    AddressLine2 = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    City = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    State = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PostalCode = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CountryCode = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    GovernmentId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    EmployerName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    IncomeBracket = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    PortalAccessEnabled = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    LastLoginAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LastContactedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    TagsCsv = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Debtors&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Debtors_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Debts&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    ExternalAccountId = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ClientReferenceNumber = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    PortfolioCode = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Category = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Currency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    OriginalPrincipal = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    OutstandingPrincipal = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    AccruedInterest = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    AccruedFees = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    InterestRateAnnualPercentage = table.Column&lt;decimal&gt;(type: &quot;decimal(9,6)&quot;, precision: 9, scale: 6, nullable: true),&#10;                    InterestCalculationMethod = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    LateFeeFlat = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    LateFeePercentage = table.Column&lt;decimal&gt;(type: &quot;decimal(9,6)&quot;, precision: 9, scale: 6, nullable: true),&#10;                    OpenedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    DueDateUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LastPaymentAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    NextActionAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    ClosedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    WriteOffReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    DisputeReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    AssignedCollectorUserId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    SettlementOfferAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    SettlementOfferExpiresAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    GraceDays = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Debts&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Debts_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Debts_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Documents&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    FileName = table.Column&lt;string&gt;(type: &quot;nvarchar(400)&quot;, maxLength: 400, nullable: false),&#10;                    ContentType = table.Column&lt;string&gt;(type: &quot;nvarchar(200)&quot;, maxLength: 200, nullable: false),&#10;                    SizeBytes = table.Column&lt;long&gt;(type: &quot;bigint&quot;, nullable: false),&#10;                    StoragePath = table.Column&lt;string&gt;(type: &quot;nvarchar(1000)&quot;, maxLength: 1000, nullable: false),&#10;                    Sha256 = table.Column&lt;string&gt;(type: &quot;nvarchar(128)&quot;, maxLength: 128, nullable: true),&#10;                    Type = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Documents&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Documents_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Documents_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;UserProfiles&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    UserId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    FirstName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    LastName = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    OrganizationId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_UserProfiles&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_UserProfiles_AspNetUsers_UserId&quot;,&#10;                        column: x =&gt; x.UserId,&#10;                        principalTable: &quot;AspNetUsers&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_UserProfiles_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_UserProfiles_Organizations_OrganizationId&quot;,&#10;                        column: x =&gt; x.OrganizationId,&#10;                        principalTable: &quot;Organizations&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;PaymentPlans&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Reference = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    Type = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Frequency = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    StartDateUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    EndDateUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    InstallmentAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    InstallmentCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    TotalPayable = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    DiscountAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    DownPaymentAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    DownPaymentDueAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    GracePeriodInDays = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    RequiresManualReview = table.Column&lt;bool&gt;(type: &quot;bit&quot;, nullable: false),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CancellationReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    CancelledAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    DefaultedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    CreatedByUserId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ApprovedByUserId = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_PaymentPlans&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_PaymentPlans_Debts_DebtId&quot;,&#10;                        column: x =&gt; x.DebtId,&#10;                        principalTable: &quot;Debts&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;InvoiceData&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DocumentId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    InvoiceNumber = table.Column&lt;string&gt;(type: &quot;nvarchar(100)&quot;, maxLength: 100, nullable: true),&#10;                    InvoiceDate = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    DueDate = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    TotalAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    Currency = table.Column&lt;string&gt;(type: &quot;nvarchar(10)&quot;, maxLength: 10, nullable: true),&#10;                    VendorName = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: true),&#10;                    VendorAddress = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    VendorAbn = table.Column&lt;string&gt;(type: &quot;nvarchar(50)&quot;, maxLength: 50, nullable: true),&#10;                    CustomerName = table.Column&lt;string&gt;(type: &quot;nvarchar(300)&quot;, maxLength: 300, nullable: true),&#10;                    CustomerAddress = table.Column&lt;string&gt;(type: &quot;nvarchar(500)&quot;, maxLength: 500, nullable: true),&#10;                    ExtractedDataJson = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    ProcessedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    ErrorMessage = table.Column&lt;string&gt;(type: &quot;nvarchar(2000)&quot;, maxLength: 2000, nullable: true),&#10;                    RetryCount = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    ConfidenceScore = table.Column&lt;decimal&gt;(type: &quot;decimal(5,4)&quot;, precision: 5, scale: 4, nullable: true),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_InvoiceData&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_InvoiceData_Documents_DocumentId&quot;,&#10;                        column: x =&gt; x.DocumentId,&#10;                        principalTable: &quot;Documents&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;PaymentInstallments&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    PaymentPlanId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    Sequence = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    DueAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    AmountDue = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    AmountPaid = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    PaidAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    LateFeeAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    TransactionReference = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    Notes = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_PaymentInstallments&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_PaymentInstallments_PaymentPlans_PaymentPlanId&quot;,&#10;                        column: x =&gt; x.PaymentPlanId,&#10;                        principalTable: &quot;PaymentPlans&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Cascade);&#10;                });&#10;&#10;            migrationBuilder.CreateTable(&#10;                name: &quot;Transactions&quot;,&#10;                columns: table =&gt; new&#10;                {&#10;                    Id = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    DebtorId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: false),&#10;                    PaymentPlanId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    PaymentInstallmentId = table.Column&lt;Guid&gt;(type: &quot;uniqueidentifier&quot;, nullable: true),&#10;                    Amount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: false),&#10;                    Currency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    Direction = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Status = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Method = table.Column&lt;int&gt;(type: &quot;int&quot;, nullable: false),&#10;                    Provider = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    ProviderRef = table.Column&lt;string&gt;(type: &quot;nvarchar(450)&quot;, nullable: false),&#10;                    ProcessedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    SettledAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true),&#10;                    FailureReason = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    FeeAmount = table.Column&lt;decimal&gt;(type: &quot;decimal(18,2)&quot;, precision: 18, scale: 2, nullable: true),&#10;                    FeeCurrency = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: true),&#10;                    MetadataJson = table.Column&lt;string&gt;(type: &quot;nvarchar(max)&quot;, nullable: false),&#10;                    CreatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: false),&#10;                    UpdatedAtUtc = table.Column&lt;DateTime&gt;(type: &quot;datetime2&quot;, nullable: true)&#10;                },&#10;                constraints: table =&gt;&#10;                {&#10;                    table.PrimaryKey(&quot;PK_Transactions&quot;, x =&gt; x.Id);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_Debtors_DebtorId&quot;,&#10;                        column: x =&gt; x.DebtorId,&#10;                        principalTable: &quot;Debtors&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_Debts_DebtId&quot;,&#10;                        column: x =&gt; x.DebtId,&#10;                        principalTable: &quot;Debts&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_PaymentInstallments_PaymentInstallmentId&quot;,&#10;                        column: x =&gt; x.PaymentInstallmentId,&#10;                        principalTable: &quot;PaymentInstallments&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                    table.ForeignKey(&#10;                        name: &quot;FK_Transactions_PaymentPlans_PaymentPlanId&quot;,&#10;                        column: x =&gt; x.PaymentPlanId,&#10;                        principalTable: &quot;PaymentPlans&quot;,&#10;                        principalColumn: &quot;Id&quot;,&#10;                        onDelete: ReferentialAction.Restrict);&#10;                });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AppConfigEntries_Key&quot;,&#10;                table: &quot;AppConfigEntries&quot;,&#10;                column: &quot;Key&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Articles_Slug&quot;,&#10;                table: &quot;Articles&quot;,&#10;                column: &quot;Slug&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetRoleClaims_RoleId&quot;,&#10;                table: &quot;AspNetRoleClaims&quot;,&#10;                column: &quot;RoleId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;RoleNameIndex&quot;,&#10;                table: &quot;AspNetRoles&quot;,&#10;                column: &quot;NormalizedName&quot;,&#10;                unique: true,&#10;                filter: &quot;[NormalizedName] IS NOT NULL&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUserClaims_UserId&quot;,&#10;                table: &quot;AspNetUserClaims&quot;,&#10;                column: &quot;UserId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUserLogins_UserId&quot;,&#10;                table: &quot;AspNetUserLogins&quot;,&#10;                column: &quot;UserId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUserRoles_RoleId&quot;,&#10;                table: &quot;AspNetUserRoles&quot;,&#10;                column: &quot;RoleId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;EmailIndex&quot;,&#10;                table: &quot;AspNetUsers&quot;,&#10;                column: &quot;NormalizedEmail&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_AspNetUsers_ExternalAuthId&quot;,&#10;                table: &quot;AspNetUsers&quot;,&#10;                column: &quot;ExternalAuthId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;UserNameIndex&quot;,&#10;                table: &quot;AspNetUsers&quot;,&#10;                column: &quot;NormalizedUserName&quot;,&#10;                unique: true,&#10;                filter: &quot;[NormalizedUserName] IS NOT NULL&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debtors_OrganizationId_Email&quot;,&#10;                table: &quot;Debtors&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;Email&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debtors_ReferenceId&quot;,&#10;                table: &quot;Debtors&quot;,&#10;                column: &quot;ReferenceId&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debts_DebtorId&quot;,&#10;                table: &quot;Debts&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debts_ExternalAccountId&quot;,&#10;                table: &quot;Debts&quot;,&#10;                column: &quot;ExternalAccountId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Debts_OrganizationId_ClientReferenceNumber&quot;,&#10;                table: &quot;Debts&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;ClientReferenceNumber&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Documents_DebtorId&quot;,&#10;                table: &quot;Documents&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Documents_OrganizationId_DebtorId_Type&quot;,&#10;                table: &quot;Documents&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;DebtorId&quot;, &quot;Type&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_InvoiceData_DocumentId&quot;,&#10;                table: &quot;InvoiceData&quot;,&#10;                column: &quot;DocumentId&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_InvoiceData_Status&quot;,&#10;                table: &quot;InvoiceData&quot;,&#10;                column: &quot;Status&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Metrics_Key&quot;,&#10;                table: &quot;Metrics&quot;,&#10;                column: &quot;Key&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Metrics_OrganizationId_RecordedAtUtc&quot;,&#10;                table: &quot;Metrics&quot;,&#10;                columns: new[] { &quot;OrganizationId&quot;, &quot;RecordedAtUtc&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Metrics_RecordedAtUtc&quot;,&#10;                table: &quot;Metrics&quot;,&#10;                column: &quot;RecordedAtUtc&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Organizations_Abn&quot;,&#10;                table: &quot;Organizations&quot;,&#10;                column: &quot;Abn&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Organizations_Subdomain&quot;,&#10;                table: &quot;Organizations&quot;,&#10;                column: &quot;Subdomain&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_PaymentInstallments_PaymentPlanId_Sequence&quot;,&#10;                table: &quot;PaymentInstallments&quot;,&#10;                columns: new[] { &quot;PaymentPlanId&quot;, &quot;Sequence&quot; },&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_PaymentPlans_DebtId&quot;,&#10;                table: &quot;PaymentPlans&quot;,&#10;                column: &quot;DebtId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_PaymentPlans_Reference&quot;,&#10;                table: &quot;PaymentPlans&quot;,&#10;                column: &quot;Reference&quot;,&#10;                unique: true);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_DebtId_ProcessedAtUtc&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                columns: new[] { &quot;DebtId&quot;, &quot;ProcessedAtUtc&quot; });&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_DebtorId&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_PaymentInstallmentId&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;PaymentInstallmentId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_PaymentPlanId&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;PaymentPlanId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_Transactions_ProviderRef&quot;,&#10;                table: &quot;Transactions&quot;,&#10;                column: &quot;ProviderRef&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_UserProfiles_DebtorId&quot;,&#10;                table: &quot;UserProfiles&quot;,&#10;                column: &quot;DebtorId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_UserProfiles_OrganizationId&quot;,&#10;                table: &quot;UserProfiles&quot;,&#10;                column: &quot;OrganizationId&quot;);&#10;&#10;            migrationBuilder.CreateIndex(&#10;                name: &quot;IX_UserProfiles_UserId&quot;,&#10;                table: &quot;UserProfiles&quot;,&#10;                column: &quot;UserId&quot;,&#10;                unique: true);&#10;        }&#10;&#10;        /// &lt;inheritdoc /&gt;&#10;        protected override void Down(MigrationBuilder migrationBuilder)&#10;        {&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AdminUsers&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AppConfigEntries&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Articles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetRoleClaims&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserClaims&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserLogins&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserRoles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUserTokens&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;InvoiceData&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Metrics&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Transactions&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;UserProfiles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetRoles&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Documents&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;PaymentInstallments&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;AspNetUsers&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;PaymentPlans&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Debts&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Debtors&quot;);&#10;&#10;            migrationBuilder.DropTable(&#10;                name: &quot;Organizations&quot;);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Controllers/ConfigurationController.Config.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Controllers/ConfigurationController.Config.cs" />
              <option name="originalContent" value="using System.Text.Json;&#10;using DebtManager.Contracts.Configuration;&#10;using Microsoft.AspNetCore.Mvc;&#10;&#10;namespace DebtManager.Web.Areas.Admin.Controllers;&#10;&#10;public partial class ConfigurationController : Controller&#10;{&#10;    [HttpGet]&#10;    public async Task&lt;IActionResult&gt; Secrets(string? q)&#10;    {&#10;        var dict = await _configService.GetAllAsync();&#10;        var filtered = string.IsNullOrWhiteSpace(q)&#10;            ? dict&#10;            : dict.Where(kv =&gt; kv.Key.Contains(q, StringComparison.OrdinalIgnoreCase))&#10;                  .ToDictionary(kv =&gt; kv.Key, kv =&gt; kv.Value);&#10;&#10;        var entries = filtered.Select(kv =&gt; new ConfigEntryVm&#10;        {&#10;            Key = kv.Key,&#10;            Value = kv.Value.value,&#10;            IsSecret = kv.Value.isSecret&#10;        }).OrderBy(x =&gt; x.Key).ToList();&#10;&#10;        var groups = entries&#10;            .GroupBy(e =&gt; e.Key.Contains(':') ? e.Key.Split(':', 2)[0] : &quot;Other&quot;)&#10;            .OrderBy(g =&gt; g.Key)&#10;            .ToDictionary(g =&gt; g.Key, g =&gt; g.ToList());&#10;&#10;        var envName = HttpContext.RequestServices.GetRequiredService&lt;IHostEnvironment&gt;().EnvironmentName;&#10;        var health = await ConfigHealthVm.BuildAsync(_configService, envName);&#10;        return View(new SecretsVm { Entries = entries, Groups = groups, Health = health, Query = q ?? string.Empty });&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; Save(ConfigEntryVm vm)&#10;    {&#10;        if (string.IsNullOrWhiteSpace(vm.Key))&#10;        {&#10;            ModelState.AddModelError(&quot;Key&quot;, &quot;Key is required&quot;);&#10;        }&#10;        else&#10;        {&#10;            var errors = ValidateConfigEntry(vm.Key, vm.Value);&#10;            foreach (var err in errors)&#10;            {&#10;                ModelState.AddModelError(&quot;Value&quot;, err);&#10;            }&#10;        }&#10;        if (!ModelState.IsValid)&#10;        {&#10;            TempData[&quot;Message&quot;] = string.Join(&quot;; &quot;, ModelState.Values.SelectMany(v =&gt; v.Errors).Select(e =&gt; e.ErrorMessage));&#10;            return RedirectToAction(&quot;Secrets&quot;);&#10;        }&#10;        &#10;        // Audit log&#10;        var existingValue = await _configService.GetAsync(vm.Key);&#10;        var action = existingValue == null ? &quot;CREATE_CONFIG&quot; : &quot;UPDATE_CONFIG&quot;;&#10;        await _auditService.LogAsync(action, &quot;Configuration&quot;, vm.Key, JsonSerializer.Serialize(new { &#10;            key = vm.Key, &#10;            isSecret = vm.IsSecret,&#10;            valueChanged = existingValue != vm.Value &#10;        }));&#10;        &#10;        await _configService.SetAsync(vm.Key, vm.Value, vm.IsSecret);&#10;        TempData[&quot;Message&quot;] = $&quot;Configuration '{vm.Key}' saved successfully&quot;;&#10;        return RedirectToAction(&quot;Secrets&quot;);&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; Delete(string key)&#10;    {&#10;        if (!string.IsNullOrWhiteSpace(key))&#10;        {&#10;            // Audit log&#10;            await _auditService.LogAsync(&quot;DELETE_CONFIG&quot;, &quot;Configuration&quot;, key,  key );&#10;            &#10;            await _configService.DeleteAsync(key);&#10;            TempData[&quot;Message&quot;] = $&quot;Configuration '{key}' deleted successfully&quot;;&#10;        }&#10;        return RedirectToAction(&quot;Secrets&quot;);&#10;    }&#10;&#10;    private static IEnumerable&lt;string&gt; ValidateConfigEntry(string key, string? value)&#10;    {&#10;        if (value == null) yield break;&#10;        // Basic validations by known keys/prefixes&#10;        if (key.Equals(&quot;Stripe:SecretKey&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;sk_&quot;, StringComparison.OrdinalIgnoreCase) &amp;&amp; !value.StartsWith(&quot;rk_&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;Stripe SecretKey should start with sk_&quot;;&#10;            if (value.Length &lt; 20) yield return &quot;Stripe SecretKey looks too short&quot;;&#10;        }&#10;        if (key.Equals(&quot;Stripe:WebhookSecret&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;whsec_&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;Stripe WebhookSecret should start with whsec_&quot;;&#10;        }&#10;        if (key.Equals(&quot;Twilio:AccountSid&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;AC&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;Twilio AccountSid should start with AC&quot;;&#10;        }&#10;        if (key.Equals(&quot;Twilio:AuthToken&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (value.Length &lt; 16) yield return &quot;Twilio AuthToken looks too short&quot;;&#10;        }&#10;        if (key.Equals(&quot;OpenAI:ApiKey&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;sk-&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;OpenAI ApiKey should start with sk-&quot;;&#10;        }&#10;        if (key.Equals(&quot;AbrApi:BaseUrl&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!Uri.TryCreate(value, UriKind.Absolute, out _))&#10;                yield return &quot;AbrApi BaseUrl must be an absolute URL&quot;;&#10;        }&#10;        if (key.Equals(&quot;System:BootstrapComplete&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            var normalized = value.Trim().ToLowerInvariant();&#10;            if (normalized != &quot;true&quot; &amp;&amp; normalized != &quot;false&quot;)&#10;                yield return &quot;System:BootstrapComplete must be 'true' or 'false'&quot;;&#10;        }&#10;    }&#10;}&#10;&#10;public class SecretsVm&#10;{&#10;    public List&lt;ConfigEntryVm&gt; Entries { get; set; } = new();&#10;    public Dictionary&lt;string, List&lt;ConfigEntryVm&gt;&gt; Groups { get; set; } = new();&#10;    public ConfigHealthVm Health { get; set; } = new();&#10;    public string Query { get; set; } = string.Empty;&#10;}&#10;&#10;public class ConfigHealthVm&#10;{&#10;    public List&lt;string&gt; MissingKeys { get; set; } = new();&#10;    public List&lt;string&gt; Warnings { get; set; } = new();&#10;    public bool IsBootstrapComplete =&gt; MissingKeys.Count == 0;&#10;    public string Environment { get; set; } = string.Empty;&#10;&#10;    public static async Task&lt;ConfigHealthVm&gt; BuildAsync(IAppConfigService cfg, string envName)&#10;    {&#10;        var vm = new ConfigHealthVm { Environment = envName };&#10;&#10;        // Allow sentinel to bypass checks&#10;        var sentinel = (await cfg.GetAsync(&quot;System:BootstrapComplete&quot;))?.Trim().ToLowerInvariant();&#10;        if (sentinel == &quot;true&quot;) return vm; // no missing keys&#10;&#10;        var required = new List&lt;string&gt;();&#10;        if (string.Equals(envName, &quot;Production&quot;, StringComparison.OrdinalIgnoreCase) || string.Equals(envName, &quot;Staging&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            required.AddRange(new[] { &quot;Stripe:SecretKey&quot;, &quot;Stripe:WebhookSecret&quot; });&#10;        }&#10;        else&#10;        {&#10;            // Dev: no hard requirements&#10;        }&#10;&#10;        foreach (var key in required)&#10;        {&#10;            var v = await cfg.GetAsync(key);&#10;            if (string.IsNullOrWhiteSpace(v)) vm.MissingKeys.Add(key);&#10;        }&#10;&#10;        // Soft requirements&#10;        var twilioSid = await cfg.GetAsync(&quot;Twilio:AccountSid&quot;);&#10;        var twilioToken = await cfg.GetAsync(&quot;Twilio:AuthToken&quot;);&#10;        if (string.IsNullOrWhiteSpace(twilioSid) || string.IsNullOrWhiteSpace(twilioToken))&#10;        {&#10;            vm.Warnings.Add(&quot;Twilio keys missing; SMS will be simulated.&quot;);&#10;        }&#10;&#10;        var abrBase = await cfg.GetAsync(&quot;AbrApi:BaseUrl&quot;);&#10;        if (string.IsNullOrWhiteSpace(abrBase))&#10;        {&#10;            vm.Warnings.Add(&quot;ABR API BaseUrl not set; ABN validation uses stub.&quot;);&#10;        }&#10;        return vm;&#10;    }&#10;}&#10;&#10;public class ConfigEntryVm&#10;{&#10;    public string Key { get; set; } = string.Empty;&#10;    public string? Value { get; set; }&#10;    public bool IsSecret { get; set; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Text.Json;&#10;using DebtManager.Contracts.Configuration;&#10;using Microsoft.AspNetCore.Mvc;&#10;&#10;namespace DebtManager.Web.Areas.Admin.Controllers;&#10;&#10;public partial class ConfigurationController : Controller&#10;{&#10;    [HttpGet]&#10;    public async Task&lt;IActionResult&gt; Secrets(string? q)&#10;    {&#10;        await _auditService.LogAsync(&quot;VIEW_SECRETS_CONFIGURATION&quot;, &quot;Configuration&quot;);&#10;        var dict = await _configService.GetAllAsync();&#10;        var filtered = string.IsNullOrWhiteSpace(q)&#10;            ? dict&#10;            : dict.Where(kv =&gt; kv.Key.Contains(q, StringComparison.OrdinalIgnoreCase))&#10;                  .ToDictionary(kv =&gt; kv.Key, kv =&gt; kv.Value);&#10;&#10;        var entries = filtered.Select(kv =&gt; new ConfigEntryVm&#10;        {&#10;            Key = kv.Key,&#10;            Value = kv.Value.value,&#10;            IsSecret = kv.Value.isSecret&#10;        }).OrderBy(x =&gt; x.Key).ToList();&#10;&#10;        var groups = entries&#10;            .GroupBy(e =&gt; e.Key.Contains(':') ? e.Key.Split(':', 2)[0] : &quot;Other&quot;)&#10;            .OrderBy(g =&gt; g.Key)&#10;            .ToDictionary(g =&gt; g.Key, g =&gt; g.ToList());&#10;&#10;        var envName = HttpContext.RequestServices.GetRequiredService&lt;IHostEnvironment&gt;().EnvironmentName;&#10;        var health = await ConfigHealthVm.BuildAsync(_configService, envName);&#10;        return View(new SecretsVm { Entries = entries, Groups = groups, Health = health, Query = q ?? string.Empty });&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; Save(ConfigEntryVm vm)&#10;    {&#10;        if (string.IsNullOrWhiteSpace(vm.Key))&#10;        {&#10;            ModelState.AddModelError(&quot;Key&quot;, &quot;Key is required&quot;);&#10;        }&#10;        else&#10;        {&#10;            var errors = ValidateConfigEntry(vm.Key, vm.Value);&#10;            foreach (var err in errors)&#10;            {&#10;                ModelState.AddModelError(&quot;Value&quot;, err);&#10;            }&#10;        }&#10;        if (!ModelState.IsValid)&#10;        {&#10;            TempData[&quot;Message&quot;] = string.Join(&quot;; &quot;, ModelState.Values.SelectMany(v =&gt; v.Errors).Select(e =&gt; e.ErrorMessage));&#10;            return RedirectToAction(&quot;Secrets&quot;);&#10;        }&#10;        &#10;        // Audit log&#10;        var existingValue = await _configService.GetAsync(vm.Key);&#10;        var action = existingValue == null ? &quot;CREATE_CONFIG&quot; : &quot;UPDATE_CONFIG&quot;;&#10;        await _auditService.LogAsync(action, &quot;Configuration&quot;, vm.Key, JsonSerializer.Serialize(new { &#10;            key = vm.Key, &#10;            isSecret = vm.IsSecret,&#10;            valueChanged = existingValue != vm.Value &#10;        }));&#10;        &#10;        await _configService.SetAsync(vm.Key, vm.Value, vm.IsSecret);&#10;        TempData[&quot;Message&quot;] = $&quot;Configuration '{vm.Key}' saved successfully&quot;;&#10;        return RedirectToAction(&quot;Secrets&quot;);&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; Delete(string key)&#10;    {&#10;        if (!string.IsNullOrWhiteSpace(key))&#10;        {&#10;            // Audit log&#10;            await _auditService.LogAsync(&quot;DELETE_CONFIG&quot;, &quot;Configuration&quot;, key,  key );&#10;            &#10;            await _configService.DeleteAsync(key);&#10;            TempData[&quot;Message&quot;] = $&quot;Configuration '{key}' deleted successfully&quot;;&#10;        }&#10;        return RedirectToAction(&quot;Secrets&quot;);&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; Reveal(string key)&#10;    {&#10;        if (string.IsNullOrWhiteSpace(key)) return BadRequest();&#10;&#10;        // Audit without exposing secret value&#10;        await _auditService.LogAsync(&quot;REVEAL_CONFIG&quot;, &quot;Configuration&quot;, key);&#10;&#10;        var value = await _configService.GetAsync(key);&#10;        return Json(new { key, value });&#10;    }&#10;&#10;    private static IEnumerable&lt;string&gt; ValidateConfigEntry(string key, string? value)&#10;    {&#10;        if (value == null) yield break;&#10;        // Basic validations by known keys/prefixes&#10;        if (key.Equals(&quot;Stripe:SecretKey&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;sk_&quot;, StringComparison.OrdinalIgnoreCase) &amp;&amp; !value.StartsWith(&quot;rk_&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;Stripe SecretKey should start with sk_&quot;;&#10;            if (value.Length &lt; 20) yield return &quot;Stripe SecretKey looks too short&quot;;&#10;        }&#10;        if (key.Equals(&quot;Stripe:WebhookSecret&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;whsec_&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;Stripe WebhookSecret should start with whsec_&quot;;&#10;        }&#10;        if (key.Equals(&quot;Twilio:AccountSid&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;AC&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;Twilio AccountSid should start with AC&quot;;&#10;        }&#10;        if (key.Equals(&quot;Twilio:AuthToken&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (value.Length &lt; 16) yield return &quot;Twilio AuthToken looks too short&quot;;&#10;        }&#10;        if (key.Equals(&quot;OpenAI:ApiKey&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!value.StartsWith(&quot;sk-&quot;, StringComparison.OrdinalIgnoreCase))&#10;                yield return &quot;OpenAI ApiKey should start with sk-&quot;;&#10;        }&#10;        if (key.Equals(&quot;AbrApi:BaseUrl&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            if (!Uri.TryCreate(value, UriKind.Absolute, out _))&#10;                yield return &quot;AbrApi BaseUrl must be an absolute URL&quot;;&#10;        }&#10;        if (key.Equals(&quot;System:BootstrapComplete&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            var normalized = value.Trim().ToLowerInvariant();&#10;            if (normalized != &quot;true&quot; &amp;&amp; normalized != &quot;false&quot;)&#10;                yield return &quot;System:BootstrapComplete must be 'true' or 'false'&quot;;&#10;        }&#10;    }&#10;}&#10;&#10;public class SecretsVm&#10;{&#10;    public List&lt;ConfigEntryVm&gt; Entries { get; set; } = new();&#10;    public Dictionary&lt;string, List&lt;ConfigEntryVm&gt;&gt; Groups { get; set; } = new();&#10;    public ConfigHealthVm Health { get; set; } = new();&#10;    public string Query { get; set; } = string.Empty;&#10;}&#10;&#10;public class ConfigHealthVm&#10;{&#10;    public List&lt;string&gt; MissingKeys { get; set; } = new();&#10;    public List&lt;string&gt; Warnings { get; set; } = new();&#10;    public bool IsBootstrapComplete =&gt; MissingKeys.Count == 0;&#10;    public string Environment { get; set; } = string.Empty;&#10;&#10;    public static async Task&lt;ConfigHealthVm&gt; BuildAsync(IAppConfigService cfg, string envName)&#10;    {&#10;        var vm = new ConfigHealthVm { Environment = envName };&#10;&#10;        // Allow sentinel to bypass checks&#10;        var sentinel = (await cfg.GetAsync(&quot;System:BootstrapComplete&quot;))?.Trim().ToLowerInvariant();&#10;        if (sentinel == &quot;true&quot;) return vm; // no missing keys&#10;&#10;        var required = new List&lt;string&gt;();&#10;        if (string.Equals(envName, &quot;Production&quot;, StringComparison.OrdinalIgnoreCase) || string.Equals(envName, &quot;Staging&quot;, StringComparison.OrdinalIgnoreCase))&#10;        {&#10;            required.AddRange(new[] { &quot;Stripe:SecretKey&quot;, &quot;Stripe:WebhookSecret&quot; });&#10;        }&#10;        else&#10;        {&#10;            // Dev: no hard requirements&#10;        }&#10;&#10;        foreach (var key in required)&#10;        {&#10;            var v = await cfg.GetAsync(key);&#10;            if (string.IsNullOrWhiteSpace(v)) vm.MissingKeys.Add(key);&#10;        }&#10;&#10;        // Soft requirements&#10;        var twilioSid = await cfg.GetAsync(&quot;Twilio:AccountSid&quot;);&#10;        var twilioToken = await cfg.GetAsync(&quot;Twilio:AuthToken&quot;);&#10;        if (string.IsNullOrWhiteSpace(twilioSid) || string.IsNullOrWhiteSpace(twilioToken))&#10;        {&#10;            vm.Warnings.Add(&quot;Twilio keys missing; SMS will be simulated.&quot;);&#10;        }&#10;&#10;        var abrBase = await cfg.GetAsync(&quot;AbrApi:BaseUrl&quot;);&#10;        if (string.IsNullOrWhiteSpace(abrBase))&#10;        {&#10;            vm.Warnings.Add(&quot;ABR API BaseUrl not set; ABN validation uses stub.&quot;);&#10;        }&#10;        return vm;&#10;    }&#10;}&#10;&#10;public class ConfigEntryVm&#10;{&#10;    public string Key { get; set; } = string.Empty;&#10;    public string? Value { get; set; }&#10;    public bool IsSecret { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Controllers/ConfigurationController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Controllers/ConfigurationController.cs" />
              <option name="originalContent" value="using Microsoft.AspNetCore.Mvc;&#10;using DebtManager.Web.Services;&#10;using Microsoft.AspNetCore.Authorization;&#10;using DebtManager.Contracts.Audit;&#10;using DebtManager.Contracts.Configuration;&#10;&#10;namespace DebtManager.Web.Areas.Admin.Controllers;&#10;&#10;[Area(&quot;Admin&quot;)]&#10;[Authorize(Policy = &quot;RequireAdminScope&quot;)]&#10;public partial class ConfigurationController : Controller&#10;{&#10;    private readonly IAuditService _auditService;&#10;    private readonly IAppConfigService _configService;&#10;&#10;    public ConfigurationController(IAuditService auditService, IAppConfigService configService)&#10;    {&#10;        _auditService = auditService;&#10;        _configService = configService;&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Index()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;System Configuration&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_CONFIGURATION&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Fees()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;Fee Configuration&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_FEE_CONFIGURATION&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Branding()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;Branding Configuration&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_BRANDING_CONFIGURATION&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Integrations()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;Integration Settings&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_INTEGRATION_SETTINGS&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.Mvc;&#10;using DebtManager.Web.Services;&#10;using Microsoft.AspNetCore.Authorization;&#10;using DebtManager.Contracts.Audit;&#10;using DebtManager.Contracts.Configuration;&#10;&#10;namespace DebtManager.Web.Areas.Admin.Controllers;&#10;&#10;[Area(&quot;Admin&quot;)]&#10;[Authorize(Policy = &quot;RequireAdminScope&quot;)]&#10;public partial class ConfigurationController : Controller&#10;{&#10;    private readonly IAuditService _auditService;&#10;    private readonly IAppConfigService _configService;&#10;    private readonly IMaintenanceState _maintenanceState;&#10;&#10;    public ConfigurationController(IAuditService auditService, IAppConfigService configService, IMaintenanceState maintenanceState)&#10;    {&#10;        _auditService = auditService;&#10;        _configService = configService;&#10;        _maintenanceState = maintenanceState;&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Index()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;System Configuration&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_CONFIGURATION&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Fees()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;Fee Configuration&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_FEE_CONFIGURATION&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Branding()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;Branding Configuration&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_BRANDING_CONFIGURATION&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;&#10;    public async Task&lt;IActionResult&gt; Integrations()&#10;    {&#10;        var theme = HttpContext.Items[BrandingResolverMiddleware.ThemeItemKey] as BrandingTheme;&#10;        ViewBag.ThemeName = theme?.Name ?? &quot;Default&quot;;&#10;        ViewBag.Title = &quot;Integration Settings&quot;;&#10;        &#10;        await _auditService.LogAsync(&quot;VIEW_INTEGRATION_SETTINGS&quot;, &quot;Configuration&quot;);&#10;        &#10;        return View();&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; ToggleMaintenance()&#10;    {&#10;        // Toggle server-side regardless of checkbox payload&#10;        var nextState = !_maintenanceState.IsMaintenance;&#10;        if (nextState)&#10;        {&#10;            _maintenanceState.Enable();&#10;            TempData[&quot;SuccessMessage&quot;] = &quot;Maintenance mode enabled&quot;;&#10;            await _auditService.LogAsync(&quot;ENABLE_MAINTENANCE&quot;, &quot;System&quot;);&#10;        }&#10;        else&#10;        {&#10;            _maintenanceState.Disable();&#10;            TempData[&quot;SuccessMessage&quot;] = &quot;Maintenance mode disabled&quot;;&#10;            await _auditService.LogAsync(&quot;DISABLE_MAINTENANCE&quot;, &quot;System&quot;);&#10;        }&#10;        return RedirectToAction(&quot;Index&quot;);&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; ClearCache()&#10;    {&#10;        // No explicit cache service found; perform audit and user feedback&#10;        await _auditService.LogAsync(&quot;CLEAR_CACHE&quot;, &quot;System&quot;);&#10;        TempData[&quot;SuccessMessage&quot;] = &quot;Application cache cleared&quot;;&#10;        return RedirectToAction(&quot;Index&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Branding.cshtml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Branding.cshtml" />
              <option name="updatedContent" value="@{&#10;    Layout = &quot;~/Areas/Admin/Views/Shared/_AdminLayout.cshtml&quot;;&#10;}&#10;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;h2 class=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt; Branding Configuration&lt;/h2&gt;&#10;    &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Manage theme colors, assets, and organization identity.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Navigation Tabs --&gt;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;ul class=&quot;flex flex-wrap border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;General&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Fees&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Fees&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;span class=&quot;inline-block py-3 px-4 bg-blue-50 dark:bg-blue-900/50 border-b-2 border-blue-600 text-blue-600 dark:text-blue-400 font-semibold&quot;&gt;Branding&lt;/span&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Integrations&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Integrations&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Secrets&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Secrets&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Audit&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Audit Log&lt;/a&gt;&#10;        &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;    &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;Theme&lt;/h3&gt;&#10;            &lt;p class=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;Primary and secondary colors&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;p-6 space-y-4&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Primary Color (HEX)&lt;/label&gt;&#10;                &lt;input type=&quot;text&quot; class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white&quot; placeholder=&quot;#0ea5e9&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;                &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Secondary Color (HEX)&lt;/label&gt;&#10;                &lt;input type=&quot;text&quot; class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white&quot; placeholder=&quot;#1e293b&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;                &lt;button class=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700&quot;&gt;Save&lt;/button&gt;&#10;                &lt;span class=&quot;ml-3 text-xs text-gray-500&quot;&gt;Saves not wired yet&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;Assets&lt;/h3&gt;&#10;            &lt;p class=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;Logos and wordmarks&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;p-6 space-y-3&quot;&gt;&#10;            &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;span class=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;Upload Logo&lt;/span&gt;&#10;                &lt;button class=&quot;px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded&quot;&gt;Choose File&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;span class=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;Upload Wordmark&lt;/span&gt;&#10;                &lt;button class=&quot;px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded&quot;&gt;Choose File&lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Fees.cshtml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Fees.cshtml" />
              <option name="updatedContent" value="@{&#10;    Layout = &quot;~/Areas/Admin/Views/Shared/_AdminLayout.cshtml&quot;;&#10;}&#10;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;h2 class=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt; Fee Configuration&lt;/h2&gt;&#10;    &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Define platform fees and business rules. This is a placeholder; wire to config service as needed.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Navigation Tabs --&gt;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;ul class=&quot;flex flex-wrap border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;General&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;span class=&quot;inline-block py-3 px-4 bg-blue-50 dark:bg-blue-900/50 border-b-2 border-blue-600 text-blue-600 dark:text-blue-400 font-semibold&quot;&gt;Fees&lt;/span&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Branding&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Branding&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Integrations&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Integrations&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Secrets&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Secrets&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Audit&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Audit Log&lt;/a&gt;&#10;        &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;    &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;Platform Fees&lt;/h3&gt;&#10;            &lt;p class=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;Set default fee configuration&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;p-6 space-y-4&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Processing Fee (%)&lt;/label&gt;&#10;                &lt;input type=&quot;number&quot; step=&quot;0.01&quot; class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white&quot; placeholder=&quot;e.g., 2.90&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;                &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Fixed Fee (cents)&lt;/label&gt;&#10;                &lt;input type=&quot;number&quot; class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white&quot; placeholder=&quot;e.g., 30&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;                &lt;button class=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700&quot;&gt;Save&lt;/button&gt;&#10;                &lt;span class=&quot;ml-3 text-xs text-gray-500&quot;&gt;Saves not wired yet&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;Rules&lt;/h3&gt;&#10;            &lt;p class=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;Operational constraints&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;p-6 space-y-3&quot;&gt;&#10;            &lt;label class=&quot;inline-flex items-center gap-2&quot;&gt;&#10;                &lt;input type=&quot;checkbox&quot; class=&quot;w-4 h-4&quot;&gt;&#10;                &lt;span class=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;Enable late fees&lt;/span&gt;&#10;            &lt;/label&gt;&#10;            &lt;label class=&quot;inline-flex items-center gap-2&quot;&gt;&#10;                &lt;input type=&quot;checkbox&quot; class=&quot;w-4 h-4&quot;&gt;&#10;                &lt;span class=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;Cap fees to invoice amount&lt;/span&gt;&#10;            &lt;/label&gt;&#10;            &lt;div class=&quot;pt-2&quot;&gt;&#10;                &lt;button class=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700&quot;&gt;Save&lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Integrations.cshtml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Integrations.cshtml" />
              <option name="updatedContent" value="@{&#10;    Layout = &quot;~/Areas/Admin/Views/Shared/_AdminLayout.cshtml&quot;;&#10;}&#10;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;h2 class=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt; Integration Settings&lt;/h2&gt;&#10;    &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Configure third-party providers used by the platform.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Navigation Tabs --&gt;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;ul class=&quot;flex flex-wrap border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;General&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Fees&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Fees&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Branding&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Branding&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;span class=&quot;inline-block py-3 px-4 bg-blue-50 dark:bg-blue-900/50 border-b-2 border-blue-600 text-blue-600 dark:text-blue-400 font-semibold&quot;&gt;Integrations&lt;/span&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Secrets&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Secrets&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Audit&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Audit Log&lt;/a&gt;&#10;        &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;    &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-rose-50 to-pink-50 dark:from-rose-900/30 dark:to-pink-900/30&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;Stripe&lt;/h3&gt;&#10;            &lt;p class=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;Payments processing&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;p-6 space-y-3&quot;&gt;&#10;            &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Manage keys in &lt;a class=&quot;text-blue-600&quot; href=&quot;/Admin/Configuration/Secrets&quot;&gt;Secrets&lt;/a&gt;&lt;/p&gt;&#10;            &lt;label class=&quot;inline-flex items-center gap-2&quot;&gt;&#10;                &lt;input type=&quot;checkbox&quot; class=&quot;w-4 h-4&quot;&gt;&#10;                &lt;span class=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;Enable Live Mode&lt;/span&gt;&#10;            &lt;/label&gt;&#10;            &lt;button class=&quot;px-4 py-2 bg-blue-600 text-white rounded&quot;&gt;Save&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-sky-50 to-blue-50 dark:from-sky-900/30 dark:to-blue-900/30&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;Twilio&lt;/h3&gt;&#10;            &lt;p class=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;SMS and voice&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;p-6 space-y-3&quot;&gt;&#10;            &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Manage keys in &lt;a class=&quot;text-blue-600&quot; href=&quot;/Admin/Configuration/Secrets&quot;&gt;Secrets&lt;/a&gt;&lt;/p&gt;&#10;            &lt;label class=&quot;inline-flex items-center gap-2&quot;&gt;&#10;                &lt;input type=&quot;checkbox&quot; class=&quot;w-4 h-4&quot;&gt;&#10;                &lt;span class=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;Send SMS in production&lt;/span&gt;&#10;            &lt;/label&gt;&#10;            &lt;button class=&quot;px-4 py-2 bg-blue-600 text-white rounded&quot;&gt;Save&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-emerald-50 to-green-50 dark:from-emerald-900/30 dark:to-green-900/30&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;OpenAI&lt;/h3&gt;&#10;            &lt;p class=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;AI assistance&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;p-6 space-y-3&quot;&gt;&#10;            &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Manage keys in &lt;a class=&quot;text-blue-600&quot; href=&quot;/Admin/Configuration/Secrets&quot;&gt;Secrets&lt;/a&gt;&lt;/p&gt;&#10;            &lt;label class=&quot;inline-flex items-center gap-2&quot;&gt;&#10;                &lt;input type=&quot;checkbox&quot; class=&quot;w-4 h-4&quot;&gt;&#10;                &lt;span class=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;Enable AI features&lt;/span&gt;&#10;            &lt;/label&gt;&#10;            &lt;button class=&quot;px-4 py-2 bg-blue-600 text-white rounded&quot;&gt;Save&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Secrets.cshtml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Areas/Admin/Views/Configuration/Secrets.cshtml" />
              <option name="originalContent" value="@model DebtManager.Web.Areas.Admin.Controllers.SecretsVm&#10;@{&#10;    Layout = &quot;~/Areas/Admin/Views/Shared/_AdminLayout.cshtml&quot;;&#10;    ViewBag.Title = &quot;Secrets &amp; Configuration&quot;;&#10;}&#10;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;h2 class=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt; Secrets &amp; Configuration&lt;/h2&gt;&#10;    &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Manage runtime configuration and sensitive credentials&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Navigation Tabs --&gt;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;ul class=&quot;flex flex-wrap border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;General&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Fees&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Fees&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Branding&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Branding&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Integrations&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Integrations&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;span class=&quot;inline-block py-3 px-4 bg-blue-50 dark:bg-blue-900/50 border-b-2 border-blue-600 text-blue-600 dark:text-blue-400 font-semibold&quot;&gt;Secrets&lt;/span&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Audit&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Audit Log&lt;/a&gt;&#10;        &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/div&gt;&#10;&#10;@if (TempData[&quot;Message&quot;] is string msg)&#10;{&#10;    &lt;div class=&quot;mb-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 rounded-lg&quot;&gt;&#10;        &lt;div class=&quot;flex items-center&quot;&gt;&#10;            &lt;svg class=&quot;w-5 h-5 mr-2&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z&quot; clip-rule=&quot;evenodd&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            @msg&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;&lt;!-- Health Status --&gt;&#10;@if (!Model.Health.IsBootstrapComplete)&#10;{&#10;    &lt;div class=&quot;mb-6 p-4 bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 rounded-lg&quot;&gt;&#10;        &lt;div class=&quot;flex items-start&quot;&gt;&#10;            &lt;svg class=&quot;w-6 h-6 text-red-600 dark:text-red-400 mr-3 flex-shrink-0&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z&quot; clip-rule=&quot;evenodd&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            &lt;div&gt;&#10;                &lt;h4 class=&quot;font-bold text-red-800 dark:text-red-200&quot;&gt;⚠️ Bootstrap Required (@Model.Health.Environment)&lt;/h4&gt;&#10;                &lt;p class=&quot;text-sm text-red-700 dark:text-red-300 mt-1&quot;&gt;The following critical configuration keys are missing:&lt;/p&gt;&#10;                &lt;ul class=&quot;list-disc ml-5 mt-2 text-sm text-red-700 dark:text-red-300&quot;&gt;&#10;                    @foreach (var k in Model.Health.MissingKeys) { &lt;li&gt;&lt;code class=&quot;bg-red-100 dark:bg-red-900/50 px-1 rounded&quot;&gt;@k&lt;/code&gt;&lt;/li&gt; }&#10;                &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;@if (Model.Health.Warnings.Any())&#10;{&#10;    &lt;div class=&quot;mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 rounded-lg&quot;&gt;&#10;        &lt;h4 class=&quot;font-bold text-yellow-800 dark:text-yellow-200 mb-2&quot;&gt;⚠️ Configuration Warnings&lt;/h4&gt;&#10;        &lt;ul class=&quot;list-disc ml-5 text-sm text-yellow-700 dark:text-yellow-300&quot;&gt;&#10;            @foreach (var w in Model.Health.Warnings) { &lt;li&gt;@w&lt;/li&gt; }&#10;        &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;&lt;!-- Search --&gt;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;form method=&quot;get&quot; action=&quot;/Admin/Configuration/Secrets&quot; class=&quot;flex gap-2&quot;&gt;&#10;        &lt;div class=&quot;relative flex-1&quot;&gt;&#10;            &lt;svg class=&quot;absolute left-3 top-3 w-5 h-5 text-gray-400&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            &lt;input type=&quot;text&quot; name=&quot;q&quot; value=&quot;@Model.Query&quot; &#10;                   class=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot; &#10;                   placeholder=&quot;Search configuration keys (e.g., Stripe, Twilio, OpenAI)&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium&quot;&gt;&#10;            Search&#10;        &lt;/button&gt;&#10;        @if (!string.IsNullOrEmpty(Model.Query))&#10;        {&#10;            &lt;a href=&quot;/Admin/Configuration/Secrets&quot; class=&quot;px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition font-medium&quot;&gt;&#10;                Clear&#10;            &lt;/a&gt;&#10;        }&#10;    &lt;/form&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Add New Entry --&gt;&#10;&lt;div class=&quot;mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;    &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;            &lt;svg class=&quot;w-5 h-5 mr-2 text-blue-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M12 6v6m0 0v6m0-6h6m-6 0H6&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            Add or Update Configuration Entry&#10;        &lt;/h3&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;p-6&quot;&gt;&#10;        &lt;form action=&quot;/Admin/Configuration/Save&quot; method=&quot;post&quot; class=&quot;space-y-4&quot;&gt;&#10;            @Html.AntiForgeryToken()&#10;            &lt;div class=&quot;grid md:grid-cols-3 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Key *&lt;/label&gt;&#10;                    &lt;input name=&quot;Key&quot; type=&quot;text&quot; required&#10;                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot; &#10;                           placeholder=&quot;e.g., Stripe:SecretKey&quot; /&gt;&#10;                    &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Use colon (:) for namespacing&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Value *&lt;/label&gt;&#10;                    &lt;input name=&quot;Value&quot; type=&quot;text&quot; required&#10;                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot; &#10;                           placeholder=&quot;Enter value&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;flex items-end&quot;&gt;&#10;                    &lt;label class=&quot;inline-flex items-center gap-2 px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition&quot;&gt;&#10;                        &lt;input type=&quot;checkbox&quot; name=&quot;IsSecret&quot; class=&quot;w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500&quot; /&gt;&#10;                        &lt;span class=&quot;text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt; Mark as Secret&lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium&quot;&gt;&#10;                     Save Configuration&#10;                &lt;/button&gt;&#10;                &lt;button type=&quot;reset&quot; class=&quot;px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition font-medium&quot;&gt;&#10;                    Clear Form&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Configuration Groups --&gt;&#10;@foreach (var group in Model.Groups)&#10;{&#10;    &lt;div class=&quot;mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/30 dark:to-indigo-900/30 border-b border-gray-200 dark:border-gray-700 rounded-t-lg&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;                &lt;svg class=&quot;w-5 h-5 mr-2 text-blue-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                    &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z&quot;/&gt;&#10;                &lt;/svg&gt;&#10;                @group.Key&#10;                &lt;span class=&quot;ml-auto text-sm font-normal text-gray-600 dark:text-gray-400&quot;&gt;@group.Value.Count entries&lt;/span&gt;&#10;            &lt;/h3&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;overflow-x-auto&quot;&gt;&#10;            &lt;table class=&quot;w-full&quot;&gt;&#10;                &lt;thead class=&quot;bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600&quot;&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Key&lt;/th&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Value&lt;/th&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Type&lt;/th&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-right text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody class=&quot;divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;                @foreach (var c in group.Value)&#10;                {&#10;                    &lt;tr class=&quot;hover:bg-gray-50 dark:hover:bg-gray-700/50 transition&quot;&gt;&#10;                        &lt;td class=&quot;px-6 py-4&quot;&gt;&#10;                            &lt;code class=&quot;text-sm font-mono text-blue-600 dark:text-blue-400&quot;&gt;@c.Key&lt;/code&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td class=&quot;px-6 py-4&quot;&gt;&#10;                            @if (c.IsSecret)&#10;                            {&#10;                                &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;span class=&quot;text-sm font-mono text-gray-400 dark:text-gray-500&quot; id=&quot;secret-@c.Key.Replace(&quot;:&quot;, &quot;-&quot;)&quot;&gt;••••••••••••&lt;/span&gt;&#10;                                    &lt;button type=&quot;button&quot; onclick=&quot;toggleSecret('@c.Key.Replace(&quot;:&quot;, &quot;-&quot;)', '@c.Value')&quot;&#10;                                            class=&quot;text-xs text-blue-600 dark:text-blue-400 hover:underline&quot;&gt;&#10;                                        ️ Show&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                            else&#10;                            {&#10;                                &lt;span class=&quot;text-sm font-mono text-gray-900 dark:text-gray-100&quot;&gt;@(string.IsNullOrEmpty(c.Value) ? &quot;(empty)&quot; : c.Value)&lt;/span&gt;&#10;                            }&#10;                        &lt;/td&gt;&#10;                        &lt;td class=&quot;px-6 py-4&quot;&gt;&#10;                            @if (c.IsSecret)&#10;                            {&#10;                                &lt;span class=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200&quot;&gt;&#10;                                    &lt;svg class=&quot;w-3 h-3 mr-1&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                                        &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z&quot; clip-rule=&quot;evenodd&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    Secret&#10;                                &lt;/span&gt;&#10;                            }&#10;                            else&#10;                            {&#10;                                &lt;span class=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200&quot;&gt;&#10;                                    Plain&#10;                                &lt;/span&gt;&#10;                            }&#10;                        &lt;/td&gt;&#10;                        &lt;td class=&quot;px-6 py-4 text-right&quot;&gt;&#10;                            &lt;div class=&quot;flex items-center justify-end gap-2&quot;&gt;&#10;                                &lt;button onclick=&quot;editConfig('@c.Key', '@c.Value', @c.IsSecret.ToString().ToLower())&quot;&#10;                                        class=&quot;text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium text-sm&quot;&gt;&#10;                                    ✏️ Edit&#10;                                &lt;/button&gt;&#10;                                &lt;form action=&quot;/Admin/Configuration/Delete&quot; method=&quot;post&quot; class=&quot;inline&quot; &#10;                                      onsubmit=&quot;return confirm('Are you sure you want to delete @c.Key?');&quot;&gt;&#10;                                    @Html.AntiForgeryToken()&#10;                                    &lt;input type=&quot;hidden&quot; name=&quot;key&quot; value=&quot;@c.Key&quot; /&gt;&#10;                                    &lt;button type=&quot;submit&quot; class=&quot;text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 font-medium text-sm&quot;&gt;&#10;                                        ️ Delete&#10;                                    &lt;/button&gt;&#10;                                &lt;/form&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                }&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;@if (!Model.Entries.Any())&#10;{&#10;    &lt;div class=&quot;text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;svg class=&quot;mx-auto w-16 h-16 text-gray-400 mb-4&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z&quot;/&gt;&#10;        &lt;/svg&gt;&#10;        &lt;h3 class=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;No Configuration Entries Found&lt;/h3&gt;&#10;        &lt;p class=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Add your first configuration entry above to get started.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;&lt;script&gt;&#10;function toggleSecret(id, value) {&#10;    const element = document.getElementById('secret-' + id);&#10;    const button = element.nextElementSibling;&#10;&#10;    if (element.textContent === '••••••••••••') {&#10;        element.textContent = value;&#10;        button.textContent = ' Hide';&#10;    } else {&#10;        element.textContent = '••••••••••••';&#10;        button.textContent = '️ Show';&#10;    }&#10;}&#10;&#10;function editConfig(key, value, isSecret) {&#10;    const form = document.querySelector('form[action=&quot;/Admin/Configuration/Save&quot;]');&#10;    form.querySelector('input[name=&quot;Key&quot;]').value = key;&#10;    form.querySelector('input[name=&quot;Value&quot;]').value = value;&#10;    form.querySelector('input[name=&quot;IsSecret&quot;]').checked = isSecret;&#10;    &#10;    // Scroll to form&#10;    form.scrollIntoView({ behavior: 'smooth', block: 'center' });&#10;    &#10;    // Highlight form&#10;    form.classList.add('ring-4', 'ring-blue-300');&#10;    setTimeout(() =&gt; form.classList.remove('ring-4', 'ring-blue-300'), 2000);&#10;}&#10;&lt;/script&gt;&#10;" />
              <option name="updatedContent" value="@model DebtManager.Web.Areas.Admin.Controllers.SecretsVm&#10;@{&#10;    Layout = &quot;~/Areas/Admin/Views/Shared/_AdminLayout.cshtml&quot;;&#10;    ViewBag.Title = &quot;Secrets &amp; Configuration&quot;;&#10;}&#10;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;h2 class=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt; Secrets &amp; Configuration&lt;/h2&gt;&#10;    &lt;p class=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;Manage runtime configuration and sensitive credentials&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Navigation Tabs --&gt;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;ul class=&quot;flex flex-wrap border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;General&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Fees&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Fees&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Branding&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Branding&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Configuration/Integrations&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt;Integrations&lt;/a&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;span class=&quot;inline-block py-3 px-4 bg-blue-50 dark:bg-blue-900/50 border-b-2 border-blue-600 text-blue-600 dark:text-blue-400 font-semibold&quot;&gt;Secrets&lt;/span&gt;&#10;        &lt;/li&gt;&#10;        &lt;li class=&quot;mr-1&quot;&gt;&#10;            &lt;a href=&quot;/Admin/Audit&quot; class=&quot;inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400&quot;&gt; Audit Log&lt;/a&gt;&#10;        &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/div&gt;&#10;&#10;@if (TempData[&quot;Message&quot;] is string msg)&#10;{&#10;    &lt;div class=&quot;mb-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 rounded-lg&quot;&gt;&#10;        &lt;div class=&quot;flex items-center&quot;&gt;&#10;            &lt;svg class=&quot;w-5 h-5 mr-2&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z&quot; clip-rule=&quot;evenodd&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            @msg&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;&lt;!-- Health Status --&gt;&#10;@if (!Model.Health.IsBootstrapComplete)&#10;{&#10;    &lt;div class=&quot;mb-6 p-4 bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 rounded-lg&quot;&gt;&#10;        &lt;div class=&quot;flex items-start&quot;&gt;&#10;            &lt;svg class=&quot;w-6 h-6 text-red-600 dark:text-red-400 mr-3 flex-shrink-0&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z&quot; clip-rule=&quot;evenodd&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            &lt;div&gt;&#10;                &lt;h4 class=&quot;font-bold text-red-800 dark:text-red-200&quot;&gt;⚠️ Bootstrap Required (@Model.Health.Environment)&lt;/h4&gt;&#10;                &lt;p class=&quot;text-sm text-red-700 dark:text-red-300 mt-1&quot;&gt;The following critical configuration keys are missing:&lt;/p&gt;&#10;                &lt;ul class=&quot;list-disc ml-5 mt-2 text-sm text-red-700 dark:text-red-300&quot;&gt;&#10;                    @foreach (var k in Model.Health.MissingKeys) { &lt;li&gt;&lt;code class=&quot;bg-red-100 dark:bg-red-900/50 px-1 rounded&quot;&gt;@k&lt;/code&gt;&lt;/li&gt; }&#10;                &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;@if (Model.Health.Warnings.Any())&#10;{&#10;    &lt;div class=&quot;mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 rounded-lg&quot;&gt;&#10;        &lt;h4 class=&quot;font-bold text-yellow-800 dark:text-yellow-200 mb-2&quot;&gt;⚠️ Configuration Warnings&lt;/h4&gt;&#10;        &lt;ul class=&quot;list-disc ml-5 text-sm text-yellow-700 dark:text-yellow-300&quot;&gt;&#10;            @foreach (var w in Model.Health.Warnings) { &lt;li&gt;@w&lt;/li&gt; }&#10;        &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;&lt;!-- Search --&gt;&#10;&lt;div class=&quot;mb-6&quot;&gt;&#10;    &lt;form method=&quot;get&quot; action=&quot;/Admin/Configuration/Secrets&quot; class=&quot;flex gap-2&quot;&gt;&#10;        &lt;div class=&quot;relative flex-1&quot;&gt;&#10;            &lt;svg class=&quot;absolute left-3 top-3 w-5 h-5 text-gray-400&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            &lt;input type=&quot;text&quot; name=&quot;q&quot; value=&quot;@Model.Query&quot; &#10;                   class=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot; &#10;                   placeholder=&quot;Search configuration keys (e.g., Stripe, Twilio, OpenAI)&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium&quot;&gt;&#10;            Search&#10;        &lt;/button&gt;&#10;        @if (!string.IsNullOrEmpty(Model.Query))&#10;        {&#10;            &lt;a href=&quot;/Admin/Configuration/Secrets&quot; class=&quot;px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition font-medium&quot;&gt;&#10;                Clear&#10;            &lt;/a&gt;&#10;        }&#10;    &lt;/form&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Add New Entry --&gt;&#10;&lt;div class=&quot;mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;    &lt;div class=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;            &lt;svg class=&quot;w-5 h-5 mr-2 text-blue-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M12 6v6m0 0v6m0-6h6m-6 0H6&quot;/&gt;&#10;            &lt;/svg&gt;&#10;            Add or Update Configuration Entry&#10;        &lt;/h3&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;p-6&quot;&gt;&#10;        &lt;form action=&quot;/Admin/Configuration/Save&quot; method=&quot;post&quot; class=&quot;space-y-4&quot;&gt;&#10;            @Html.AntiForgeryToken()&#10;            &lt;div class=&quot;grid md:grid-cols-3 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Key *&lt;/label&gt;&#10;                    &lt;input name=&quot;Key&quot; type=&quot;text&quot; required&#10;                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot; &#10;                           placeholder=&quot;e.g., Stripe:SecretKey&quot; /&gt;&#10;                    &lt;p class=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1&quot;&gt;Use colon (:) for namespacing&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;Value *&lt;/label&gt;&#10;                    &lt;input name=&quot;Value&quot; type=&quot;text&quot; required&#10;                           class=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot; &#10;                           placeholder=&quot;Enter value&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;flex items-end&quot;&gt;&#10;                    &lt;label class=&quot;inline-flex items-center gap-2 px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition&quot;&gt;&#10;                        &lt;input type=&quot;checkbox&quot; name=&quot;IsSecret&quot; class=&quot;w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500&quot; /&gt;&#10;                        &lt;span class=&quot;text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt; Mark as Secret&lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium&quot;&gt;&#10;                     Save Configuration&#10;                &lt;/button&gt;&#10;                &lt;button type=&quot;reset&quot; class=&quot;px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition font-medium&quot;&gt;&#10;                    Clear Form&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Hidden anti-forgery token for AJAX --&gt;&#10;&lt;form id=&quot;af-form&quot; method=&quot;post&quot; class=&quot;hidden&quot;&gt;@Html.AntiForgeryToken()&lt;/form&gt;&#10;&#10;&lt;!-- Configuration Groups --&gt;&#10;@foreach (var group in Model.Groups)&#10;{&#10;    &lt;div class=&quot;mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div class=&quot;p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/30 dark:to-indigo-900/30 border-b border-gray-200 dark:border-gray-700 rounded-t-lg&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;                &lt;svg class=&quot;w-5 h-5 mr-2 text-blue-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                    &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z&quot;/&gt;&#10;                &lt;/svg&gt;&#10;                @group.Key&#10;                &lt;span class=&quot;ml-auto text-sm font-normal text-gray-600 dark:text-gray-400&quot;&gt;@group.Value.Count entries&lt;/span&gt;&#10;            &lt;/h3&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;overflow-x-auto&quot;&gt;&#10;            &lt;table class=&quot;w-full&quot;&gt;&#10;                &lt;thead class=&quot;bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600&quot;&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Key&lt;/th&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Value&lt;/th&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Type&lt;/th&gt;&#10;                        &lt;th class=&quot;px-6 py-3 text-right text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody class=&quot;divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;                @foreach (var c in group.Value)&#10;                {&#10;                    var safeId = c.Key.Replace(&quot;:&quot;, &quot;-&quot;);&#10;                    &lt;tr class=&quot;hover:bg-gray-50 dark:hover:bg-gray-700/50 transition&quot;&gt;&#10;                        &lt;td class=&quot;px-6 py-4&quot;&gt;&#10;                            &lt;code class=&quot;text-sm font-mono text-blue-600 dark:text-blue-400&quot;&gt;@c.Key&lt;/code&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td class=&quot;px-6 py-4&quot;&gt;&#10;                            @if (c.IsSecret)&#10;                            {&#10;                                &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;span class=&quot;text-sm font-mono text-gray-400 dark:text-gray-500&quot; id=&quot;secret-@safeId&quot; data-loaded=&quot;false&quot;&gt;••••••••••••&lt;/span&gt;&#10;                                    &lt;button type=&quot;button&quot; onclick=&quot;revealSecret(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(c.Key)), '@safeId')&quot; &#10;                                            class=&quot;text-xs text-blue-600 dark:text-blue-400 hover:underline&quot;&gt;&#10;                                        ️ Show&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                            else&#10;                            {&#10;                                &lt;span class=&quot;text-sm font-mono text-gray-900 dark:text-gray-100&quot;&gt;@(string.IsNullOrEmpty(c.Value) ? &quot;(empty)&quot; : c.Value)&lt;/span&gt;&#10;                            }&#10;                        &lt;/td&gt;&#10;                        &lt;td class=&quot;px-6 py-4&quot;&gt;&#10;                            @if (c.IsSecret)&#10;                            {&#10;                                &lt;span class=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200&quot;&gt;&#10;                                    &lt;svg class=&quot;w-3 h-3 mr-1&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                                        &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z&quot; clip-rule=&quot;evenodd&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    Secret&#10;                                &lt;/span&gt;&#10;                            }&#10;                            else&#10;                            {&#10;                                &lt;span class=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200&quot;&gt;&#10;                                    Plain&#10;                                &lt;/span&gt;&#10;                            }&#10;                        &lt;/td&gt;&#10;                        &lt;td class=&quot;px-6 py-4 text-right&quot;&gt;&#10;                            &lt;div class=&quot;flex items-center justify-end gap-2&quot;&gt;&#10;                                &lt;button onclick=&quot;editConfig(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(c.Key)), @Html.Raw(System.Text.Json.JsonSerializer.Serialize(c.IsSecret ? &quot;&quot; : c.Value)), @c.IsSecret.ToString().ToLower())&quot; &#10;                                        class=&quot;text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium text-sm&quot;&gt;&#10;                                    ✏️ Edit&#10;                                &lt;/button&gt;&#10;                                &lt;form action=&quot;/Admin/Configuration/Delete&quot; method=&quot;post&quot; class=&quot;inline&quot; &#10;                                      onsubmit=&quot;return confirm('Are you sure you want to delete @c.Key?');&quot;&gt;&#10;                                    @Html.AntiForgeryToken()&#10;                                    &lt;input type=&quot;hidden&quot; name=&quot;key&quot; value=&quot;@c.Key&quot; /&gt;&#10;                                    &lt;button type=&quot;submit&quot; class=&quot;text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 font-medium text-sm&quot;&gt;&#10;                                        ️ Delete&#10;                                    &lt;/button&gt;&#10;                                &lt;/form&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                }&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;@if (!Model.Entries.Any())&#10;{&#10;    &lt;div class=&quot;text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;svg class=&quot;mx-auto w-16 h-16 text-gray-400 mb-4&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z&quot;/&gt;&#10;        &lt;/svg&gt;&#10;        &lt;h3 class=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;No Configuration Entries Found&lt;/h3&gt;&#10;        &lt;p class=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Add your first configuration entry above to get started.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;}&#10;&#10;&lt;script&gt;&#10;function getRequestVerificationToken() {&#10;    const tokenInput = document.querySelector('#af-form input[name=&quot;__RequestVerificationToken&quot;]')&#10;        || document.querySelector('form input[name=&quot;__RequestVerificationToken&quot;]');&#10;    return tokenInput ? tokenInput.value : '';&#10;}&#10;&#10;async function revealSecret(key, safeId) {&#10;    const element = document.getElementById('secret-' + safeId);&#10;    if (!element) return;&#10;    const button = element.nextElementSibling;&#10;&#10;    const masked = '••••••••••••';&#10;    const isMasked = element.textContent === masked;&#10;&#10;    if (!isMasked) {&#10;        element.textContent = masked;&#10;        button.textContent = '️ Show';&#10;        return;&#10;    }&#10;&#10;    button.disabled = true;&#10;    button.textContent = 'Loading…';&#10;    try {&#10;        const token = getRequestVerificationToken();&#10;        const params = new URLSearchParams({ key, __RequestVerificationToken: token });&#10;        const res = await fetch('/Admin/Configuration/Reveal', {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',&#10;                'RequestVerificationToken': token&#10;            },&#10;            body: params&#10;        });&#10;        if (!res.ok) throw new Error('Failed to reveal secret');&#10;        const data = await res.json();&#10;        element.textContent = data.value || '(empty)';&#10;        button.textContent = ' Hide';&#10;    } catch (e) {&#10;        console.error(e);&#10;        alert('Unable to reveal secret.');&#10;        element.textContent = masked;&#10;        button.textContent = '️ Show';&#10;    } finally {&#10;        button.disabled = false;&#10;    }&#10;}&#10;&#10;function editConfig(key, value, isSecret) {&#10;    const form = document.querySelector('form[action=&quot;/Admin/Configuration/Save&quot;]');&#10;    form.querySelector('input[name=&quot;Key&quot;]').value = key;&#10;    form.querySelector('input[name=&quot;Value&quot;]').value = value || '';&#10;    form.querySelector('input[name=&quot;IsSecret&quot;]').checked = isSecret;&#10;    &#10;    // Scroll to form&#10;    form.scrollIntoView({ behavior: 'smooth', block: 'center' });&#10;    &#10;    // Highlight form&#10;    form.classList.add('ring-4', 'ring-blue-300');&#10;    setTimeout(() =&gt; form.classList.remove('ring-4', 'ring-blue-300'), 2000);&#10;}&#10;&lt;/script&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Controllers/SecurityController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Controllers/SecurityController.cs" />
              <option name="originalContent" value="using System.ComponentModel.DataAnnotations;&#10;using System.Security.Claims;&#10;using System.Text.Json;&#10;using DebtManager.Infrastructure.Identity;&#10;using DebtManager.Infrastructure.Persistence;&#10;using Microsoft.AspNetCore.Authorization;&#10;using Microsoft.AspNetCore.Identity;&#10;using Microsoft.AspNetCore.Mvc;&#10;using DebtManager.Contracts.Notifications;&#10;using Microsoft.EntityFrameworkCore;&#10;using QRCoder;&#10;using DebtManager.Contracts.Configuration;&#10;using Microsoft.Extensions.Configuration;&#10;&#10;namespace DebtManager.Web.Controllers;&#10;&#10;[Authorize]&#10;public class SecurityController : Controller&#10;{&#10;    private readonly UserManager&lt;ApplicationUser&gt; _userManager;&#10;    private readonly ISmsSender _smsSender;&#10;    private readonly AppDbContext _db;&#10;    private readonly IAppConfigService _cfg;&#10;    private readonly IConfiguration _configuration;&#10;&#10;    public SecurityController(&#10;        UserManager&lt;ApplicationUser&gt; userManager, &#10;        ISmsSender smsSender, &#10;        AppDbContext db, &#10;        IAppConfigService cfg,&#10;        IConfiguration configuration)&#10;    {&#10;        _userManager = userManager;&#10;        _smsSender = smsSender;&#10;        _db = db;&#10;        _cfg = cfg;&#10;        _configuration = configuration;&#10;    }&#10;&#10;    [HttpGet]&#10;    public async Task&lt;IActionResult&gt; Setup()&#10;    {&#10;        var user = await GetCurrentUserAsync();&#10;&#10;        // Determine scope/mode&#10;        var isAdmin = User.IsInRole(&quot;Admin&quot;);&#10;        var showTotp = isAdmin;            // Admins: TOTP only&#10;        var showSms = !isAdmin;            // Client/User: SMS OTP only&#10;&#10;        string key = string.Empty;&#10;        string otpauth = string.Empty;&#10;        string qrDataUrl = string.Empty;&#10;        if (showTotp)&#10;        {&#10;            key = await EnsureAuthenticatorKey(user);&#10;            otpauth = BuildOtpAuthUri(&quot;AdevaPlus&quot;, user.Email ?? user.UserName ?? user.Id.ToString(), key);&#10;            qrDataUrl = GenerateQrPngDataUrl(otpauth);&#10;        }&#10;&#10;        var (heading, subheading, tips) = BuildCopyForScope(isAdmin);&#10;        &#10;        // Dev mode: Check if bypass is enabled from appsettings.json&#10;        var bypass = _configuration.GetValue&lt;bool&gt;(&quot;Security:BypassOtpVerification&quot;);&#10;&#10;        // Persisted phone from last SendSms&#10;        var lastSmsPhone = TempData.Peek(&quot;SmsPhone&quot;) as string;&#10;&#10;        // Pre-fill phone: prefer last sent phone &gt; confirmed user phone &gt; dev default&#10;        var prefillPhone = !string.IsNullOrWhiteSpace(lastSmsPhone)&#10;            ? lastSmsPhone&#10;            : (user.PhoneNumber ?? string.Empty);&#10;&#10;        if (string.IsNullOrWhiteSpace(prefillPhone) &amp;&amp; bypass)&#10;        {&#10;            prefillPhone = &quot;+61400000000&quot;; // Dev default&#10;        }&#10;&#10;        var vm = new TotpSetupVm&#10;        {&#10;            AuthenticatorKey = showTotp ? FormatKey(key) : string.Empty,&#10;            OtpauthUri = showTotp ? otpauth : string.Empty,&#10;            PhoneNumber = prefillPhone,&#10;            TotpEnabled = user.TwoFactorEnabled,&#10;            QrCodeDataUrl = showTotp ? qrDataUrl : string.Empty,&#10;            ShowTotp = showTotp,&#10;            ShowSms = showSms,&#10;            Heading = heading,&#10;            SubHeading = subheading,&#10;            Tips = tips,&#10;            DevMode = bypass,&#10;            DevSmsCode = bypass ? &quot;000000&quot; : string.Empty&#10;        };&#10;        return View(vm);&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; SendSms([FromForm] string phoneNumber)&#10;    {&#10;        var user = await GetCurrentUserAsync();&#10;        var isAdmin = User.IsInRole(&quot;Admin&quot;);&#10;        if (isAdmin)&#10;        {&#10;            TempData[&quot;Error&quot;] = &quot;SMS verification is not required for administrator setup.&quot;;&#10;            return RedirectToAction(nameof(Setup));&#10;        }&#10;        if (string.IsNullOrWhiteSpace(phoneNumber))&#10;        {&#10;            TempData[&quot;Error&quot;] = &quot;Phone number is required.&quot;;&#10;            return RedirectToAction(nameof(Setup));&#10;        }&#10;&#10;        // Normalize and persist phone for the next step so token matches exactly&#10;        var normalizedPhone = NormalizePhone(phoneNumber);&#10;        TempData[&quot;SmsPhone&quot;] = normalizedPhone;&#10;&#10;        // Dev mode: Check if bypass is enabled from appsettings.json&#10;        var bypass = _configuration.GetValue&lt;bool&gt;(&quot;Security:BypassOtpVerification&quot;);&#10;        if (!bypass)&#10;        {&#10;            var token = await _userManager.GenerateChangePhoneNumberTokenAsync(user, normalizedPhone);&#10;            await _smsSender.SendSmsAsync(normalizedPhone, $&quot;Adeva Plus verification code: {token}&quot;);&#10;        }&#10;        else&#10;        {&#10;            await _smsSender.SendSmsAsync(normalizedPhone, &quot;Adeva Plus verification code: 000000&quot;);&#10;        }&#10;&#10;        TempData[&quot;Message&quot;] = &quot;Verification code sent via SMS.&quot;;&#10;        return RedirectToAction(nameof(Setup));&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; Complete([FromForm] TotpCompleteVm vm)&#10;    {&#10;        var user = await GetCurrentUserAsync();&#10;        var isAdmin = User.IsInRole(&quot;Admin&quot;);&#10;        var isClient = User.IsInRole(&quot;Client&quot;);&#10;        var isUser = User.IsInRole(&quot;User&quot;);&#10;        var showTotp = isAdmin;    // Admins: TOTP only&#10;        var showSms = !isAdmin;    // Client/User: SMS OTP only&#10;&#10;        // Dev mode: Check if bypass is enabled from appsettings.json&#10;        var bypass = _configuration.GetValue&lt;bool&gt;(&quot;Security:BypassOtpVerification&quot;);&#10;&#10;        bool phoneVerified = false;&#10;        bool totpVerified = false;&#10;&#10;        // Conditional validation for SMS&#10;        if (showSms)&#10;        {&#10;            // Prefer the last phone number we sent the SMS to&#10;            var persistedPhone = TempData.Peek(&quot;SmsPhone&quot;) as string;&#10;            var postedPhone = vm.PhoneNumber;&#10;            var phoneToVerify = NormalizePhone(!string.IsNullOrWhiteSpace(persistedPhone) ? persistedPhone : postedPhone);&#10;&#10;            if (string.IsNullOrWhiteSpace(phoneToVerify))&#10;            {&#10;                ModelState.AddModelError(&quot;PhoneNumber&quot;, &quot;Phone number is required.&quot;);&#10;            }&#10;            else if (string.IsNullOrWhiteSpace(vm.SmsCode))&#10;            {&#10;                ModelState.AddModelError(&quot;SmsCode&quot;, &quot;SMS verification code is required.&quot;);&#10;            }&#10;            else&#10;            {&#10;                if (bypass)&#10;                {&#10;                    // Bypass mode - accept any code (e.g., 000000) and auto-verify&#10;                    user.PhoneNumber = phoneToVerify;&#10;                    user.PhoneNumberConfirmed = true;&#10;                    phoneVerified = true;&#10;                    vm.PhoneNumber = phoneToVerify;&#10;                }&#10;                else&#10;                {&#10;                    // Atomically set + confirm phone using Identity helper&#10;                    var result = await _userManager.ChangePhoneNumberAsync(user, phoneToVerify, vm.SmsCode!);&#10;                    if (!result.Succeeded)&#10;                    {&#10;                        foreach (var err in result.Errors)&#10;                        {&#10;                            ModelState.AddModelError(&quot;SmsCode&quot;, err.Description);&#10;                        }&#10;                    }&#10;                    else&#10;                    {&#10;                        phoneVerified = true;&#10;                        vm.PhoneNumber = phoneToVerify;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Conditional validation for TOTP&#10;        if (showTotp)&#10;        {&#10;            if (string.IsNullOrWhiteSpace(vm.TotpCode))&#10;            {&#10;                ModelState.AddModelError(&quot;TotpCode&quot;, &quot;Authenticator app code is required.&quot;);&#10;            }&#10;            else&#10;            {&#10;                if (bypass)&#10;                {&#10;                    // Bypass mode - accept any code and auto-verify&#10;                    totpVerified = true;&#10;                }&#10;                else&#10;                {&#10;                    var verified = await _userManager.VerifyTwoFactorTokenAsync(user, TokenOptions.DefaultAuthenticatorProvider, vm.TotpCode!);&#10;                    if (!verified)&#10;                    {&#10;                        ModelState.AddModelError(&quot;TotpCode&quot;, &quot;Invalid authenticator code.&quot;);&#10;                    }&#10;                    else&#10;                    {&#10;                        totpVerified = true;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Check for any validation errors&#10;        if (!ModelState.IsValid)&#10;        {&#10;            // Store validation errors in TempData for display&#10;            var validationErrors = ModelState&#10;                .Where(x =&gt; x.Value?.Errors.Count &gt; 0)&#10;                .ToDictionary(&#10;                    kvp =&gt; kvp.Key,&#10;                    kvp =&gt; kvp.Value!.Errors.Select(e =&gt; e.ErrorMessage).ToArray()&#10;                );&#10;            &#10;            TempData[&quot;ValidationErrors&quot;] = JsonSerializer.Serialize(validationErrors);&#10;            &#10;            return RedirectToAction(nameof(Setup));&#10;        }&#10;&#10;        // Apply changes if verified (for bypass path, Identity helper already saved in normal path)&#10;        if (phoneVerified &amp;&amp; bypass)&#10;        {&#10;            await _userManager.UpdateAsync(user);&#10;            TempData[&quot;SmsPhone&quot;] = vm.PhoneNumber;&#10;        }&#10;&#10;        if (totpVerified)&#10;        {&#10;            await _userManager.SetTwoFactorEnabledAsync(user, true);&#10;        }&#10;&#10;        // Persist any remaining changes&#10;        await _userManager.UpdateAsync(user);&#10;        &#10;        TempData[&quot;Message&quot;] = isAdmin&#10;            ? &quot;Authenticator app set up successfully. TOTP is now required for admin sign-in.&quot;&#10;            : &quot;Phone verified successfully. We'll use SMS one-time codes to keep your account secure.&quot;;&#10;&#10;        // Route to appropriate onboarding after security setup&#10;        if (isAdmin) &#10;            return Redirect(&quot;/Admin&quot;);&#10;        &#10;        if (isClient)&#10;        {&#10;            // Client scope ? Organization onboarding&#10;            var profile = await _db.UserProfiles.FirstOrDefaultAsync(p =&gt; p.UserId == user.Id);&#10;            if (profile?.OrganizationId == null)&#10;            {&#10;                TempData[&quot;Message&quot;] = &quot;Phone verified! Let's set up your organization.&quot;;&#10;                return Redirect(&quot;/Client/Onboarding&quot;);&#10;            }&#10;            TempData[&quot;Message&quot;] = &quot;Phone verified! Welcome back.&quot;;&#10;            return Redirect(&quot;/Client&quot;);&#10;        }&#10;        &#10;        if (isUser)&#10;        {&#10;            // User scope ? Debtor onboarding&#10;            var profile = await _db.UserProfiles.FirstOrDefaultAsync(p =&gt; p.UserId == user.Id);&#10;            if (profile?.DebtorId == null)&#10;            {&#10;                TempData[&quot;Message&quot;] = &quot;Phone verified! Let's complete your profile.&quot;;&#10;                return Redirect(&quot;/User/Onboarding&quot;);&#10;            }&#10;            TempData[&quot;Message&quot;] = &quot;Phone verified! Welcome back.&quot;;&#10;            return Redirect(&quot;/User&quot;);&#10;        }&#10;&#10;        // Fallback - if no role matched&#10;        TempData[&quot;Error&quot;] = $&quot;Unable to determine user role. Admin: {isAdmin}, Client: {isClient}, User: {isUser}&quot;;&#10;        return Redirect(&quot;/&quot;);&#10;    }&#10;&#10;    private static string NormalizePhone(string? phone)&#10;    {&#10;        if (string.IsNullOrWhiteSpace(phone)) return string.Empty;&#10;        var p = phone.Trim();&#10;        // Remove spaces, dashes, and parentheses&#10;        p = new string(p.Where(c =&gt; char.IsDigit(c) || c == '+').ToArray());&#10;        // Ensure it starts with '+' for E.164 if it looks like AU number&#10;        if (!p.StartsWith(&quot;+&quot;) &amp;&amp; p.StartsWith(&quot;0&quot;))&#10;        {&#10;            // naive AU normalization 04xxxxxxxx -&gt; +614xxxxxxxx&#10;            if (p.StartsWith(&quot;04&quot;) &amp;&amp; p.Length == 10)&#10;            {&#10;                p = &quot;+61&quot; + p.Substring(1);&#10;            }&#10;        }&#10;        return p;&#10;    }&#10;&#10;    private async Task&lt;ApplicationUser&gt; GetCurrentUserAsync()&#10;    {&#10;        // Prefer lookup by ExternalAuthId from OIDC claims&#10;        var externalId = User.FindFirstValue(&quot;oid&quot;) ?? User.FindFirstValue(ClaimTypes.NameIdentifier);&#10;        if (!string.IsNullOrWhiteSpace(externalId))&#10;        {&#10;            var byExternal = await _db.Users.FirstOrDefaultAsync(u =&gt; u.ExternalAuthId == externalId);&#10;            if (byExternal != null) return byExternal;&#10;        }&#10;&#10;        var name = User.Identity?.Name;&#10;        if (!string.IsNullOrWhiteSpace(name))&#10;        {&#10;            var byName = await _userManager.FindByNameAsync(name);&#10;            if (byName != null) return byName;&#10;        }&#10;&#10;        var byCookie = await _userManager.GetUserAsync(User);&#10;        if (byCookie != null) return byCookie;&#10;&#10;        throw new InvalidOperationException(&quot;User not found&quot;);&#10;    }&#10;&#10;    private async Task&lt;string&gt; EnsureAuthenticatorKey(ApplicationUser user)&#10;    {&#10;        var key = await _userManager.GetAuthenticatorKeyAsync(user);&#10;        if (string.IsNullOrEmpty(key))&#10;        {&#10;            await _userManager.ResetAuthenticatorKeyAsync(user);&#10;            key = await _userManager.GetAuthenticatorKeyAsync(user);&#10;        }&#10;        return key!;&#10;    }&#10;&#10;    private static string BuildOtpAuthUri(string issuer, string account, string secret)&#10;    {&#10;        return $&quot;otpauth://totp/{Uri.EscapeDataString(issuer)}:{Uri.EscapeDataString(account)}?secret={secret}&amp;issuer={Uri.EscapeDataString(issuer)}&amp;digits=6&quot;;&#10;    }&#10;&#10;    private static string FormatKey(string key)&#10;    {&#10;        var groups = new List&lt;string&gt;();&#10;        for (int i = 0; i &lt; key.Length; i += 4)&#10;        {&#10;            groups.Add(key.Substring(i, Math.Min(4, key.Length - i)));&#10;        }&#10;        return string.Join(&quot; &quot;, groups);&#10;    }&#10;&#10;    private static string GenerateQrPngDataUrl(string text)&#10;    {&#10;        using var generator = new QRCodeGenerator();&#10;        using var data = generator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q);&#10;        var png = new PngByteQRCode(data);&#10;        var bytes = png.GetGraphic(20);&#10;        return &quot;data:image/png;base64,&quot; + Convert.ToBase64String(bytes);&#10;    }&#10;&#10;    private static (string heading, string subheading, List&lt;string&gt; tips) BuildCopyForScope(bool isAdmin)&#10;    {&#10;        if (isAdmin)&#10;        {&#10;            return (&#10;                heading: &quot;Secure your admin account with an Authenticator App&quot;,&#10;                subheading: &quot;Admins must use Time�based One�Time Passwords (TOTP). Scan the QR code and enter the 6�digit code from your app to finish.&quot;,&#10;                tips: new List&lt;string&gt;&#10;                {&#10;                    &quot;Use any authenticator app (Microsoft, Google, Authy).&quot;,&#10;                    &quot;Back up your recovery codes in your password manager.&quot;,&#10;                    &quot;TOTP will be required on every admin sign�in.&quot;&#10;                }&#10;            );&#10;        }&#10;        return (&#10;            heading: &quot;Verify your phone number&quot;,&#10;            subheading: &quot;We send a one�time SMS code to confirm it's you. This keeps your account secure without needing an authenticator app.&quot;,&#10;            tips: new List&lt;string&gt;&#10;            {&#10;                &quot;Enter a mobile number where you can receive SMS messages.&quot;,&#10;                &quot;If you don't receive a code, check the number and try again.&quot;,&#10;                &quot;You can update your phone later from your profile.&quot;&#10;            }&#10;        );&#10;    }&#10;}&#10;&#10;public class TotpSetupVm&#10;{&#10;    public string AuthenticatorKey { get; set; } = string.Empty;&#10;    public string OtpauthUri { get; set; } = string.Empty;&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    public bool TotpEnabled { get; set; }&#10;    public string QrCodeDataUrl { get; set; } = string.Empty;&#10;&#10;    // UI mode&#10;    public bool ShowTotp { get; set; }&#10;    public bool ShowSms { get; set; }&#10;&#10;    // Copy&#10;    public string Heading { get; set; } = string.Empty;&#10;    public string SubHeading { get; set; } = string.Empty;&#10;    public List&lt;string&gt; Tips { get; set; } = new();&#10;    &#10;    // Dev mode&#10;    public bool DevMode { get; set; }&#10;    public string DevSmsCode { get; set; } = string.Empty;&#10;}&#10;&#10;public class TotpCompleteVm&#10;{&#10;    // All optional; validated conditionally based on role&#10;    public string? PhoneNumber { get; set; }&#10;    public string? SmsCode { get; set; }&#10;    public string? TotpCode { get; set; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.ComponentModel.DataAnnotations;&#10;using System.Security.Claims;&#10;using System.Text.Json;&#10;using DebtManager.Infrastructure.Identity;&#10;using DebtManager.Infrastructure.Persistence;&#10;using Microsoft.AspNetCore.Authorization;&#10;using Microsoft.AspNetCore.Identity;&#10;using Microsoft.AspNetCore.Mvc;&#10;using DebtManager.Contracts.Notifications;&#10;using Microsoft.EntityFrameworkCore;&#10;using QRCoder;&#10;using DebtManager.Contracts.Configuration;&#10;using Microsoft.Extensions.Configuration;&#10;&#10;namespace DebtManager.Web.Controllers;&#10;&#10;[Authorize]&#10;public class SecurityController : Controller&#10;{&#10;    private readonly UserManager&lt;ApplicationUser&gt; _userManager;&#10;    private readonly ISmsSender _smsSender;&#10;    private readonly AppDbContext _db;&#10;    private readonly IAppConfigService _cfg;&#10;    private readonly IConfiguration _configuration;&#10;&#10;    public SecurityController(&#10;        UserManager&lt;ApplicationUser&gt; userManager, &#10;        ISmsSender smsSender, &#10;        AppDbContext db, &#10;        IAppConfigService cfg,&#10;        IConfiguration configuration)&#10;    {&#10;        _userManager = userManager;&#10;        _smsSender = smsSender;&#10;        _db = db;&#10;        _cfg = cfg;&#10;        _configuration = configuration;&#10;    }&#10;&#10;    [HttpGet]&#10;    public async Task&lt;IActionResult&gt; Setup()&#10;    {&#10;        var user = await GetCurrentUserAsync();&#10;&#10;        // Determine scope/mode&#10;        var isAdmin = User.IsInRole(&quot;Admin&quot;);&#10;        var showTotp = isAdmin;            // Admins: TOTP only&#10;        var showSms = !isAdmin;            // Client/User: SMS OTP only&#10;&#10;        string key = string.Empty;&#10;        string otpauth = string.Empty;&#10;        string qrDataUrl = string.Empty;&#10;        if (showTotp)&#10;        {&#10;            key = await EnsureAuthenticatorKey(user);&#10;            otpauth = BuildOtpAuthUri(&quot;AdevaPlus&quot;, user.Email ?? user.UserName ?? user.Id.ToString(), key);&#10;            qrDataUrl = GenerateQrPngDataUrl(otpauth);&#10;        }&#10;&#10;        var (heading, subheading, tips) = BuildCopyForScope(isAdmin);&#10;        &#10;        // Prefer runtime-managed config; fallback to appsettings&#10;        var bypass = await GetBypassAsync();&#10;&#10;        // Persisted phone from last SendSms&#10;        var lastSmsPhone = TempData.Peek(&quot;SmsPhone&quot;) as string;&#10;&#10;        // Pre-fill phone: prefer last sent phone &gt; confirmed user phone &gt; dev default&#10;        var prefillPhone = !string.IsNullOrWhiteSpace(lastSmsPhone)&#10;            ? lastSmsPhone&#10;            : (user.PhoneNumber ?? string.Empty);&#10;&#10;        if (string.IsNullOrWhiteSpace(prefillPhone) &amp;&amp; bypass)&#10;        {&#10;            prefillPhone = &quot;+61400000000&quot;; // Dev default&#10;        }&#10;&#10;        var vm = new TotpSetupVm&#10;        {&#10;            AuthenticatorKey = showTotp ? FormatKey(key) : string.Empty,&#10;            OtpauthUri = showTotp ? otpauth : string.Empty,&#10;            PhoneNumber = prefillPhone,&#10;            TotpEnabled = user.TwoFactorEnabled,&#10;            QrCodeDataUrl = showTotp ? qrDataUrl : string.Empty,&#10;            ShowTotp = showTotp,&#10;            ShowSms = showSms,&#10;            Heading = heading,&#10;            SubHeading = subheading,&#10;            Tips = tips,&#10;            DevMode = bypass,&#10;            DevSmsCode = bypass ? &quot;000000&quot; : string.Empty&#10;        };&#10;        return View(vm);&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; SendSms([FromForm] string phoneNumber)&#10;    {&#10;        var user = await GetCurrentUserAsync();&#10;        var isAdmin = User.IsInRole(&quot;Admin&quot;);&#10;        if (isAdmin)&#10;        {&#10;            TempData[&quot;Error&quot;] = &quot;SMS verification is not required for administrator setup.&quot;;&#10;            return RedirectToAction(nameof(Setup));&#10;        }&#10;        if (string.IsNullOrWhiteSpace(phoneNumber))&#10;        {&#10;            TempData[&quot;Error&quot;] = &quot;Phone number is required.&quot;;&#10;            return RedirectToAction(nameof(Setup));&#10;        }&#10;&#10;        // Normalize and persist phone for the next step so token matches exactly&#10;        var normalizedPhone = NormalizePhone(phoneNumber);&#10;        TempData[&quot;SmsPhone&quot;] = normalizedPhone;&#10;&#10;        var bypass = await GetBypassAsync();&#10;        if (!bypass)&#10;        {&#10;            var token = await _userManager.GenerateChangePhoneNumberTokenAsync(user, normalizedPhone);&#10;            await _smsSender.SendSmsAsync(normalizedPhone, $&quot;Adeva Plus verification code: {token}&quot;);&#10;        }&#10;        else&#10;        {&#10;            await _smsSender.SendSmsAsync(normalizedPhone, &quot;Adeva Plus verification code: 000000&quot;);&#10;        }&#10;&#10;        TempData[&quot;Message&quot;] = &quot;Verification code sent via SMS.&quot;;&#10;        return RedirectToAction(nameof(Setup));&#10;    }&#10;&#10;    [HttpPost]&#10;    [ValidateAntiForgeryToken]&#10;    public async Task&lt;IActionResult&gt; Complete([FromForm] TotpCompleteVm vm)&#10;    {&#10;        var user = await GetCurrentUserAsync();&#10;        var isAdmin = User.IsInRole(&quot;Admin&quot;);&#10;        var isClient = User.IsInRole(&quot;Client&quot;);&#10;        var isUser = User.IsInRole(&quot;User&quot;);&#10;        var showTotp = isAdmin;    // Admins: TOTP only&#10;        var showSms = !isAdmin;    // Client/User: SMS OTP only&#10;&#10;        var bypass = await GetBypassAsync();&#10;&#10;        bool phoneVerified = false;&#10;        bool totpVerified = false;&#10;&#10;        // Conditional validation for SMS&#10;        if (showSms)&#10;        {&#10;            // Prefer the last phone number we sent the SMS to&#10;            var persistedPhone = TempData.Peek(&quot;SmsPhone&quot;) as string;&#10;            var postedPhone = vm.PhoneNumber;&#10;            var phoneToVerify = NormalizePhone(!string.IsNullOrWhiteSpace(persistedPhone) ? persistedPhone : postedPhone);&#10;&#10;            if (string.IsNullOrWhiteSpace(phoneToVerify))&#10;            {&#10;                ModelState.AddModelError(&quot;PhoneNumber&quot;, &quot;Phone number is required.&quot;);&#10;            }&#10;            else if (string.IsNullOrWhiteSpace(vm.SmsCode))&#10;            {&#10;                ModelState.AddModelError(&quot;SmsCode&quot;, &quot;SMS verification code is required.&quot;);&#10;            }&#10;            else&#10;            {&#10;                if (bypass)&#10;                {&#10;                    // Bypass mode - accept any code (e.g., 000000) and auto-verify&#10;                    user.PhoneNumber = phoneToVerify;&#10;                    user.PhoneNumberConfirmed = true;&#10;                    phoneVerified = true;&#10;                    vm.PhoneNumber = phoneToVerify;&#10;                }&#10;                else&#10;                {&#10;                    // Atomically set + confirm phone using Identity helper&#10;                    var result = await _userManager.ChangePhoneNumberAsync(user, phoneToVerify, vm.SmsCode!);&#10;                    if (!result.Succeeded)&#10;                    {&#10;                        foreach (var err in result.Errors)&#10;                        {&#10;                            ModelState.AddModelError(&quot;SmsCode&quot;, err.Description);&#10;                        }&#10;                    }&#10;                    else&#10;                    {&#10;                        phoneVerified = true;&#10;                        vm.PhoneNumber = phoneToVerify;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Conditional validation for TOTP&#10;        if (showTotp)&#10;        {&#10;            if (string.IsNullOrWhiteSpace(vm.TotpCode))&#10;            {&#10;                ModelState.AddModelError(&quot;TotpCode&quot;, &quot;Authenticator app code is required.&quot;);&#10;            }&#10;            else&#10;            {&#10;                if (bypass)&#10;                {&#10;                    // Bypass mode - accept any code and auto-verify&#10;                    totpVerified = true;&#10;                }&#10;                else&#10;                {&#10;                    var verified = await _userManager.VerifyTwoFactorTokenAsync(user, TokenOptions.DefaultAuthenticatorProvider, vm.TotpCode!);&#10;                    if (!verified)&#10;                    {&#10;                        ModelState.AddModelError(&quot;TotpCode&quot;, &quot;Invalid authenticator code.&quot;);&#10;                    }&#10;                    else&#10;                    {&#10;                        totpVerified = true;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Check for any validation errors&#10;        if (!ModelState.IsValid)&#10;        {&#10;            // Store validation errors in TempData for display&#10;            var validationErrors = ModelState&#10;                .Where(x =&gt; x.Value?.Errors.Count &gt; 0)&#10;                .ToDictionary(&#10;                    kvp =&gt; kvp.Key,&#10;                    kvp =&gt; kvp.Value!.Errors.Select(e =&gt; e.ErrorMessage).ToArray()&#10;                );&#10;            &#10;            TempData[&quot;ValidationErrors&quot;] = JsonSerializer.Serialize(validationErrors);&#10;            &#10;            return RedirectToAction(nameof(Setup));&#10;        }&#10;&#10;        // Apply changes if verified (for bypass path, Identity helper already saved in normal path)&#10;        if (phoneVerified &amp;&amp; bypass)&#10;        {&#10;            await _userManager.UpdateAsync(user);&#10;            TempData[&quot;SmsPhone&quot;] = vm.PhoneNumber;&#10;        }&#10;&#10;        if (totpVerified)&#10;        {&#10;            await _userManager.SetTwoFactorEnabledAsync(user, true);&#10;        }&#10;&#10;        // Persist any remaining changes&#10;        await _userManager.UpdateAsync(user);&#10;        &#10;        TempData[&quot;Message&quot;] = isAdmin&#10;            ? &quot;Authenticator app set up successfully. TOTP is now required for admin sign-in.&quot;&#10;            : &quot;Phone verified successfully. We'll use SMS one-time codes to keep your account secure.&quot;;&#10;&#10;        // Route to appropriate onboarding after security setup&#10;        if (isAdmin) &#10;            return Redirect(&quot;/Admin&quot;);&#10;        &#10;        if (isClient)&#10;        {&#10;            // Client scope ? Organization onboarding&#10;            var profile = await _db.UserProfiles.FirstOrDefaultAsync(p =&gt; p.UserId == user.Id);&#10;            if (profile?.OrganizationId == null)&#10;            {&#10;                TempData[&quot;Message&quot;] = &quot;Phone verified! Let's set up your organization.&quot;;&#10;                return Redirect(&quot;/Client/Onboarding&quot;);&#10;            }&#10;            TempData[&quot;Message&quot;] = &quot;Phone verified! Welcome back.&quot;;&#10;            return Redirect(&quot;/Client&quot;);&#10;        }&#10;        &#10;        if (isUser)&#10;        {&#10;            // User scope ? Debtor onboarding&#10;            var profile = await _db.UserProfiles.FirstOrDefaultAsync(p =&gt; p.UserId == user.Id);&#10;            if (profile?.DebtorId == null)&#10;            {&#10;                TempData[&quot;Message&quot;] = &quot;Phone verified! Let's complete your profile.&quot;;&#10;                return Redirect(&quot;/User/Onboarding&quot;);&#10;            }&#10;            TempData[&quot;Message&quot;] = &quot;Phone verified! Welcome back.&quot;;&#10;            return Redirect(&quot;/User&quot;);&#10;        }&#10;&#10;        // Fallback - if no role matched&#10;        TempData[&quot;Error&quot;] = $&quot;Unable to determine user role. Admin: {isAdmin}, Client: {isClient}, User: {isUser}&quot;;&#10;        return Redirect(&quot;/&quot;);&#10;    }&#10;&#10;    private static string NormalizePhone(string? phone)&#10;    {&#10;        if (string.IsNullOrWhiteSpace(phone)) return string.Empty;&#10;        var p = phone.Trim();&#10;        // Remove spaces, dashes, and parentheses&#10;        p = new string(p.Where(c =&gt; char.IsDigit(c) || c == '+').ToArray());&#10;        // Ensure it starts with '+' for E.164 if it looks like AU number&#10;        if (!p.StartsWith(&quot;+&quot;) &amp;&amp; p.StartsWith(&quot;0&quot;))&#10;        {&#10;            // naive AU normalization 04xxxxxxxx -&gt; +614xxxxxxxx&#10;            if (p.StartsWith(&quot;04&quot;) &amp;&amp; p.Length == 10)&#10;            {&#10;                p = &quot;+61&quot; + p.Substring(1);&#10;            }&#10;        }&#10;        return p;&#10;    }&#10;&#10;    private async Task&lt;ApplicationUser&gt; GetCurrentUserAsync()&#10;    {&#10;        // Prefer lookup by ExternalAuthId from OIDC claims&#10;        var externalId = User.FindFirstValue(&quot;oid&quot;) ?? User.FindFirstValue(ClaimTypes.NameIdentifier);&#10;        if (!string.IsNullOrWhiteSpace(externalId))&#10;        {&#10;            var byExternal = await _db.Users.FirstOrDefaultAsync(u =&gt; u.ExternalAuthId == externalId);&#10;            if (byExternal != null) return byExternal;&#10;        }&#10;&#10;        var name = User.Identity?.Name;&#10;        if (!string.IsNullOrWhiteSpace(name))&#10;        {&#10;            var byName = await _userManager.FindByNameAsync(name);&#10;            if (byName != null) return byName;&#10;        }&#10;&#10;        var byCookie = await _userManager.GetUserAsync(User);&#10;        if (byCookie != null) return byCookie;&#10;&#10;        throw new InvalidOperationException(&quot;User not found&quot;);&#10;    }&#10;&#10;    private async Task&lt;string&gt; EnsureAuthenticatorKey(ApplicationUser user)&#10;    {&#10;        var key = await _userManager.GetAuthenticatorKeyAsync(user);&#10;        if (string.IsNullOrEmpty(key))&#10;        {&#10;            await _userManager.ResetAuthenticatorKeyAsync(user);&#10;            key = await _userManager.GetAuthenticatorKeyAsync(user);&#10;        }&#10;        return key!;&#10;    }&#10;&#10;    private static string BuildOtpAuthUri(string issuer, string account, string secret)&#10;    {&#10;        return $&quot;otpauth://totp/{Uri.EscapeDataString(issuer)}:{Uri.EscapeDataString(account)}?secret={secret}&amp;issuer={Uri.EscapeDataString(issuer)}&amp;digits=6&quot;;&#10;    }&#10;&#10;    private static string FormatKey(string key)&#10;    {&#10;        var groups = new List&lt;string&gt;();&#10;        for (int i = 0; i &lt; key.Length; i += 4)&#10;        {&#10;            groups.Add(key.Substring(i, Math.Min(4, key.Length - i)));&#10;        }&#10;        return string.Join(&quot; &quot;, groups);&#10;    }&#10;&#10;    private static string GenerateQrPngDataUrl(string text)&#10;    {&#10;        using var generator = new QRCodeGenerator();&#10;        using var data = generator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q);&#10;        var png = new PngByteQRCode(data);&#10;        var bytes = png.GetGraphic(20);&#10;        return &quot;data:image/png;base64,&quot; + Convert.ToBase64String(bytes);&#10;    }&#10;&#10;    private static (string heading, string subheading, List&lt;string&gt; tips) BuildCopyForScope(bool isAdmin)&#10;    {&#10;        if (isAdmin)&#10;        {&#10;            return (&#10;                heading: &quot;Secure your admin account with an Authenticator App&quot;,&#10;                subheading: &quot;Admins must use Time�based One�Time Passwords (TOTP). Scan the QR code and enter the 6�digit code from your app to finish.&quot;,&#10;                tips: new List&lt;string&gt;&#10;                {&#10;                    &quot;Use any authenticator app (Microsoft, Google, Authy).&quot;,&#10;                    &quot;Back up your recovery codes in your password manager.&quot;,&#10;                    &quot;TOTP will be required on every admin sign�in.&quot;&#10;                }&#10;            );&#10;        }&#10;        return (&#10;            heading: &quot;Verify your phone number&quot;,&#10;            subheading: &quot;We send a one�time SMS code to confirm it's you. This keeps your account secure without needing an authenticator app.&quot;,&#10;            tips: new List&lt;string&gt;&#10;            {&#10;                &quot;Enter a mobile number where you can receive SMS messages.&quot;,&#10;                &quot;If you don't receive a code, check the number and try again.&quot;,&#10;                &quot;You can update your phone later from your profile.&quot;&#10;            }&#10;        );&#10;    }&#10;&#10;    private async Task&lt;bool&gt; GetBypassAsync()&#10;    {&#10;        var v = await _cfg.GetAsync&lt;string&gt;(&quot;Security:BypassOtpVerification&quot;);&#10;        if (!string.IsNullOrWhiteSpace(v) &amp;&amp; bool.TryParse(v, out var parsed))&#10;        {&#10;            return parsed;&#10;        }&#10;        return _configuration.GetValue&lt;bool&gt;(&quot;Security:BypassOtpVerification&quot;);&#10;    }&#10;}&#10;&#10;public class TotpSetupVm&#10;{&#10;    public string AuthenticatorKey { get; set; } = string.Empty;&#10;    public string OtpauthUri { get; set; } = string.Empty;&#10;    public string PhoneNumber { get; set; } = string.Empty;&#10;    public bool TotpEnabled { get; set; }&#10;    public string QrCodeDataUrl { get; set; } = string.Empty;&#10;&#10;    // UI mode&#10;    public bool ShowTotp { get; set; }&#10;    public bool ShowSms { get; set; }&#10;&#10;    // Copy&#10;    public string Heading { get; set; } = string.Empty;&#10;    public string SubHeading { get; set; } = string.Empty;&#10;    public List&lt;string&gt; Tips { get; set; } = new();&#10;    &#10;    // Dev mode&#10;    public bool DevMode { get; set; }&#10;    public string DevSmsCode { get; set; } = string.Empty;&#10;}&#10;&#10;public class TotpCompleteVm&#10;{&#10;    // All optional; validated conditionally based on role&#10;    public string? PhoneNumber { get; set; }&#10;    public string? SmsCode { get; set; }&#10;    public string? TotpCode { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/DebtManager.Web.csproj">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/DebtManager.Web.csproj" />
              <option name="originalContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;&#10;  &lt;PropertyGroup&gt;&#10;    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#10;    &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;&#10;    &lt;UserSecretsId&gt;DebtManager-Web-Local&lt;/UserSecretsId&gt;&#10;  &lt;/PropertyGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Contracts/DebtManager.Contracts.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Application/DebtManager.Application.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Domain/DebtManager.Domain.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Infrastructure/DebtManager.Infrastructure.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../Services.AbrValidation/Services.AbrValidation.csproj&quot; /&gt;&#10;  &lt;/ItemGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;PackageReference Include=&quot;Bogus&quot; Version=&quot;35.6.4&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Handlebars.Net&quot; Version=&quot;2.1.6&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Markdig&quot; Version=&quot;0.37.0&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Authentication.JwtBearer&quot; Version=&quot;8.0.7&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.Identity.Web&quot; Version=&quot;3.3.1&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;QRCoder&quot; Version=&quot;1.6.0&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Serilog.AspNetCore&quot; Version=&quot;8.0.3&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Hangfire.AspNetCore&quot; Version=&quot;1.8.14&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Hangfire.SqlServer&quot; Version=&quot;1.8.14&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation&quot; Version=&quot;8.0.7&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;AspNetCore.HealthChecks.UI.Client&quot; Version=&quot;8.0.1&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;8.0.7&quot;&gt;&#10;      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;&#10;      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;&#10;    &lt;/PackageReference&gt;&#10;  &lt;/ItemGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;None Update=&quot;tailwind.config.cjs&quot;&gt;&#10;      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;&#10;    &lt;/None&gt;&#10;    &lt;None Update=&quot;postcss.config.cjs&quot;&gt;&#10;      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;&#10;    &lt;/None&gt;&#10;  &lt;/ItemGroup&gt;&#10;&lt;/Project&gt;&#10;" />
              <option name="updatedContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;&#10;  &lt;PropertyGroup&gt;&#10;    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#10;    &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;&#10;    &lt;UserSecretsId&gt;DebtManager-Web-Local&lt;/UserSecretsId&gt;&#10;  &lt;/PropertyGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Contracts/DebtManager.Contracts.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Application/DebtManager.Application.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Domain/DebtManager.Domain.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../DebtManager.Infrastructure/DebtManager.Infrastructure.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;../Services.AbrValidation/Services.AbrValidation.csproj&quot; /&gt;&#10;  &lt;/ItemGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;PackageReference Include=&quot;Bogus&quot; Version=&quot;35.6.4&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Handlebars.Net&quot; Version=&quot;2.1.6&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Markdig&quot; Version=&quot;0.37.0&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Authentication.JwtBearer&quot; Version=&quot;8.0.7&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.Identity.Web&quot; Version=&quot;3.3.1&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;QRCoder&quot; Version=&quot;1.6.0&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Serilog.AspNetCore&quot; Version=&quot;8.0.3&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Hangfire.AspNetCore&quot; Version=&quot;1.8.14&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Hangfire.SqlServer&quot; Version=&quot;1.8.14&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation&quot; Version=&quot;8.0.7&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;AspNetCore.HealthChecks.UI.Client&quot; Version=&quot;8.0.1&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;8.0.7&quot;&gt;&#10;      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;&#10;      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;&#10;    &lt;/PackageReference&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.StackExchangeRedis&quot; Version=&quot;8.0.7&quot; /&gt;&#10;  &lt;/ItemGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;None Update=&quot;tailwind.config.cjs&quot;&gt;&#10;      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;&#10;    &lt;/None&gt;&#10;    &lt;None Update=&quot;postcss.config.cjs&quot;&gt;&#10;      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;&#10;    &lt;/None&gt;&#10;  &lt;/ItemGroup&gt;&#10;&lt;/Project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebtManager.Web/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebtManager.Web/Program.cs" />
              <option name="originalContent" value="using DebtManager.Web;&#10;using DebtManager.Web.Services;&#10;using Microsoft.AspNetCore.Mvc;&#10;using DebtManager.Infrastructure;&#10;using DebtManager.Infrastructure.Persistence;&#10;using DebtManager.Application;&#10;using Hangfire;&#10;using Hangfire.SqlServer;&#10;using Microsoft.EntityFrameworkCore;&#10;using Serilog;&#10;using Microsoft.Identity.Web;&#10;using Microsoft.AspNetCore.Authentication.OpenIdConnect;&#10;using Microsoft.AspNetCore.Authorization;&#10;using DebtManager.Infrastructure.Identity;&#10;using Microsoft.AspNetCore.Identity;&#10;using DebtManager.Web.Auth;&#10;using Microsoft.AspNetCore.Authentication;&#10;using Microsoft.AspNetCore.Authentication.Cookies;&#10;using DebtManager.Web.Middleware;&#10;using DebtManager.Web.Jobs;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Serilog basic setup (keep config-driven to avoid eager provider initialization)&#10;// Tip: Use appsettings to reduce noisy providers at boot (e.g., Microsoft to Warning)&#10;builder.Host.UseSerilog((ctx, lc) =&gt; lc.ReadFrom.Configuration(ctx.Configuration));&#10;&#10;// MVC + conditionally add runtime compilation only for local dev&#10;var mvcBuilder = builder.Services.AddControllersWithViews();&#10;if (builder.Environment.IsDevelopment())&#10;{&#10;    mvcBuilder.AddRazorRuntimeCompilation();&#10;}&#10;&#10;builder.Services.AddHttpContextAccessor();&#10;&#10;// Maintenance state&#10;builder.Services.AddSingleton&lt;DebtManager.Web.Services.IMaintenanceState, DebtManager.Web.Services.MaintenanceState&gt;();&#10;&#10;// Health checks&#10;builder.Services.AddHealthChecks();&#10;&#10;// EF Core&#10;var cs = builder.Configuration.GetConnectionString(&quot;Default&quot;) ?? &quot;Server=(localdb)\\MSSQLLocalDB;Database=DebtManager;Trusted_Connection=True;&quot;;&#10;builder.Services.AddDbContext&lt;AppDbContext&gt;(opts =&gt; opts.UseSqlServer(cs));&#10;&#10;// Identity Core using EF stores&#10;builder.Services&#10;    .AddIdentityCore&lt;ApplicationUser&gt;(options =&gt;&#10;    {&#10;        options.User.RequireUniqueEmail = false; // External identity provides uniqueness by oid&#10;        options.SignIn.RequireConfirmedAccount = false;&#10;        options.Tokens.AuthenticatorTokenProvider = TokenOptions.DefaultAuthenticatorProvider;&#10;    })&#10;    .AddRoles&lt;ApplicationRole&gt;()&#10;    .AddEntityFrameworkStores&lt;AppDbContext&gt;()&#10;    .AddSignInManager()&#10;    .AddDefaultTokenProviders();&#10;&#10;// Configure authentication: Cookies as default auth, OIDC as challenge.&#10;builder.Services&#10;    .AddAuthentication(options =&gt;&#10;    {&#10;        options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;&#10;        options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;&#10;    })&#10;    .AddMicrosoftIdentityWebApp(options =&gt;&#10;    {&#10;        var b2c = builder.Configuration.GetSection(&quot;AzureAdB2C&quot;);&#10;        options.ClientId = b2c[&quot;ClientId&quot;]!;&#10;        options.Instance = b2c[&quot;Instance&quot;] ?? &quot;https://jsraauth.b2clogin.com/&quot;;&#10;        options.Domain = b2c[&quot;Domain&quot;] ?? &quot;jsraauth.onmicrosoft.com&quot;;&#10;        options.Authority = b2c[&quot;Authority&quot;]!;&#10;        options.ClientSecret = b2c[&quot;ClientSecret&quot;]; // Added client secret&#10;        options.CallbackPath = b2c[&quot;CallbackPath&quot;] ?? &quot;/signin-oidc&quot;;&#10;        options.SignedOutCallbackPath = b2c[&quot;SignedOutCallbackPath&quot;] ?? &quot;/signout-callback-oidc&quot;;&#10;        options.TokenValidationParameters.NameClaimType = &quot;name&quot;;&#10;        options.Events = new OpenIdConnectEvents&#10;        {&#10;            OnTokenValidated = async ctx =&gt; await TokenValidatedHandler.OnTokenValidated(ctx)&#10;        };&#10;    })&#10;    .EnableTokenAcquisitionToCallDownstreamApi()&#10;    .AddInMemoryTokenCaches();&#10;&#10;// Configure the cookie handler options (scheme added by MicrosoftIdentityWeb)&#10;builder.Services.Configure&lt;CookieAuthenticationOptions&gt;(CookieAuthenticationDefaults.AuthenticationScheme, options =&gt;&#10;{&#10;    options.LoginPath = &quot;/Dev/Login&quot;;&#10;    options.AccessDeniedPath = &quot;/Dev/Login&quot;;&#10;    options.SlidingExpiration = true;&#10;});&#10;&#10;// Claims transformation to map scopes -&gt; roles&#10;builder.Services.AddScoped&lt;IClaimsTransformation, B2CRoleClaimsTransformation&gt;();&#10;&#10;// Hangfire (SQL Server for persistence and audit)&#10;var hangfireCs = builder.Configuration.GetConnectionString(&quot;Hangfire&quot;) ?? cs;&#10;builder.Services.AddHangfire(cfg =&gt; cfg&#10;    .UseSimpleAssemblyNameTypeSerializer()&#10;    // Avoid forcing Newtonsoft/advanced serializer settings to keep startup lean&#10;    .UseSqlServerStorage(hangfireCs));&#10;// Remove AddHangfireServer to avoid crashing the host when storage is unavailable&#10;// builder.Services.AddHangfireServer();&#10;&#10;// Branding resolver&#10;builder.Services.AddScoped&lt;BrandingResolverMiddleware&gt;();&#10;builder.Services.AddScoped&lt;IAdminService, AdminService&gt;();&#10;&#10;// Messaging services (generic + onboarding orchestration)&#10;builder.Services.AddScoped&lt;IMessageQueueService, MessageQueueService&gt;();&#10;builder.Services.AddScoped&lt;IOnboardingNotificationService, OnboardingNotificationService&gt;();&#10;builder.Services.AddScoped&lt;MessageDispatchJob&gt;();&#10;builder.Services.AddScoped&lt;IBusinessLookupService&gt;(x =&gt;&#10;{&#10;    var logger = x.GetRequiredService&lt;ILogger&lt;AbrBusinessLookupService&gt;&gt;();&#10;    var key = builder.Configuration[&quot;AbrApi:ApiKey&quot;];&#10;    return new AbrBusinessLookupService(builder.Configuration[&quot;AbrApi:ApiKey&quot;] ?? string.Empty , logger);&#10;});&#10;&#10;builder.Services.AddInfrastructure(builder.Configuration);&#10;builder.Services.AddApplication();&#10;&#10;builder.Services.AddAuthorization(options =&gt;&#10;{&#10;    var scopes = builder.Configuration.GetSection(&quot;AzureB2CScopes&quot;);&#10;    var userScope = scopes[&quot;User&quot;] ?? string.Empty;&#10;    var clientScope = scopes[&quot;Client&quot;] ?? string.Empty;&#10;    var adminScope = scopes[&quot;Admin&quot;] ?? string.Empty;&#10;    options.AddPolicy(&quot;RequireUserScope&quot;, policy =&gt;&#10;        policy.RequireAssertion(ctx =&gt; ctx.User.HasClaim(&quot;scp&quot;, userScope)));&#10;    options.AddPolicy(&quot;RequireClientScope&quot;, policy =&gt;&#10;        policy.RequireAssertion(ctx =&gt; ctx.User.HasClaim(&quot;scp&quot;, clientScope)));&#10;    options.AddPolicy(&quot;RequireAdminScope&quot;, policy =&gt;&#10;        policy.RequireAssertion(ctx =&gt; ctx.User.HasClaim(&quot;scp&quot;, adminScope)));&#10;});&#10;&#10;var app = builder.Build();&#10;&#10;// Initialize database (lean): migrate; optional seed is handled inside initializer via config flags&#10;var maintenance = app.Services.GetRequiredService&lt;IMaintenanceState&gt;();&#10;try&#10;{&#10;    // await DebtManager.Web.Data.DbInitializer.InitializeAsync(app.Services, app.Environment);&#10;}&#10;catch (Exception ex)&#10;{&#10;    // Enter maintenance mode and log the startup exception. App will stay up and serve 503.&#10;    maintenance.Enable(ex);&#10;    Log.ForContext(&quot;Startup&quot;, true).Error(ex, &quot;Startup initialization failed; entering maintenance mode.&quot;);&#10;}&#10;&#10;app.UseSerilogRequestLogging();&#10;&#10;// Maintenance mode should be evaluated as early as possible&#10;app.UseMaintenanceMode();&#10;&#10;if (!app.Environment.IsDevelopment())&#10;{&#10;    app.UseExceptionHandler(&quot;/Home/Error&quot;);&#10;    app.UseHsts();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;app.UseStaticFiles();&#10;&#10;app.UseRouting();&#10;&#10;app.UseAuthentication();&#10;&#10;// Dev-only auth redirect middleware&#10;if (app.Environment.IsDevelopment() &amp;&amp; app.Configuration.GetValue&lt;bool&gt;(&quot;DevAuth:EnableFakeSignin&quot;))&#10;{&#10;    app.UseMiddleware&lt;DevAuthRedirectMiddleware&gt;();&#10;}&#10;&#10;app.UseAuthorization();&#10;&#10;// Enforce security onboarding (TOTP, phone, client org)&#10;app.UseMiddleware&lt;SecurityEnforcementMiddleware&gt;();&#10;&#10;// Admin bootstrap nudge (after auth)&#10;app.UseMiddleware&lt;BootstrapNudgeMiddleware&gt;();&#10;&#10;app.UseMiddleware&lt;BrandingResolverMiddleware&gt;();&#10;&#10;app.MapHealthChecks(&quot;/health/live&quot;);&#10;app.MapHealthChecks(&quot;/health/ready&quot;);&#10;&#10;// Hangfire Dashboard - Secured with Admin scope&#10;app.MapHangfireDashboard(&quot;/hangfire&quot;, new Hangfire.DashboardOptions&#10;{&#10;    Authorization = new[] { new HangfireAuthorizationFilter() }&#10;});&#10;&#10;// Areas routing&#10;app.MapControllerRoute(&#10;    name: &quot;areas&quot;,&#10;    pattern: &quot;{area:exists}/{controller=Home}/{action=Index}/{id?}&quot;);&#10;&#10;// Default route&#10;app.MapControllerRoute(&#10;    name: &quot;default&quot;,&#10;    pattern: &quot;{controller=Home}/{action=Index}/{id?}&quot;);&#10;&#10;// Simple API for recipient search (admin)&#10;app.MapGet(&quot;/api/admin/usersearch&quot;, async ([FromQuery] string q, AppDbContext db) =&gt;&#10;{&#10;    if (string.IsNullOrWhiteSpace(q) || q.Length &lt; 2) return Results.Json(Array.Empty&lt;object&gt;());&#10;    q = q.ToLowerInvariant();&#10;    var results = await db.Users&#10;        .Where(u =&gt; (u.Email ?? &quot;&quot;).ToLower().Contains(q) || (u.UserName ?? &quot;&quot;).ToLower().Contains(q))&#10;        .OrderBy(u =&gt; u.Email)&#10;        .Take(10)&#10;        .Select(u =&gt; new { id = u.Id, name = u.UserName ?? u.Email ?? &quot;Unknown&quot;, email = u.Email ?? string.Empty })&#10;        .ToListAsync();&#10;    return Results.Json(results);&#10;}).RequireAuthorization(new AuthorizeAttribute { Policy = &quot;RequireAdminScope&quot; });&#10;&#10;// Configure recurring jobs only if not in maintenance and server is enabled&#10;if (!maintenance.IsMaintenance)&#10;{&#10;    var serverEnabled = app.Configuration.GetValue&lt;bool&gt;(&quot;Hangfire:ServerEnabled&quot;);&#10;    if (serverEnabled)&#10;    {&#10;        BackgroundJobServer? server = null;&#10;        try&#10;        {&#10;            server = new BackgroundJobServer();&#10;            // Configure recurring jobs&#10;            DebtManager.Web.Jobs.NightlyJobs.ConfigureRecurringJobs();&#10;            RecurringJob.AddOrUpdate(&quot;dispatch-queued-messages-di&quot;, () =&gt; app.Services.GetRequiredService&lt;MessageDispatchJob&gt;().RunAsync(CancellationToken.None), Cron.Minutely);&#10;            // Dispose server gracefully on shutdown&#10;            var lifetime = app.Services.GetRequiredService&lt;IHostApplicationLifetime&gt;();&#10;            lifetime.ApplicationStopping.Register(() =&gt; server.Dispose());&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            maintenance.Enable(ex);&#10;            Log.Error(ex, &quot;Failed to start Hangfire server; entering maintenance mode.&quot;);&#10;        }&#10;    }&#10;}&#10;&#10;app.Run();&#10;&#10;// Expose Program for WebApplicationFactory in tests&#10;public partial class Program { }&#10;&#10;// For convenience: you can bundle lean startup tuning into a helper and call it here.&#10;// Example (not invoked):&#10;// LeanStartup.Apply(builder); // Uncomment to apply additional lean settings in one place.&#10;" />
              <option name="updatedContent" value="using DebtManager.Web;&#10;using DebtManager.Web.Services;&#10;using Microsoft.AspNetCore.Mvc;&#10;using DebtManager.Infrastructure;&#10;using DebtManager.Infrastructure.Persistence;&#10;using DebtManager.Application;&#10;using Hangfire;&#10;using Hangfire.SqlServer;&#10;using Microsoft.EntityFrameworkCore;&#10;using Serilog;&#10;using Microsoft.Identity.Web;&#10;using Microsoft.AspNetCore.Authentication.OpenIdConnect;&#10;using Microsoft.AspNetCore.Authorization;&#10;using DebtManager.Infrastructure.Identity;&#10;using Microsoft.AspNetCore.Identity;&#10;using DebtManager.Web.Auth;&#10;using Microsoft.AspNetCore.Authentication;&#10;using Microsoft.AspNetCore.Authentication.Cookies;&#10;using DebtManager.Web.Middleware;&#10;using DebtManager.Web.Jobs;&#10;using Microsoft.Extensions.Caching.StackExchangeRedis;&#10;using Microsoft.Extensions.Caching.Distributed;&#10;using DebtManager.Contracts.Configuration;&#10;using Services.AbrValidation; // for AbrBusinessLookupService&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Serilog basic setup (keep config-driven to avoid eager provider initialization)&#10;// Tip: Use appsettings to reduce noisy providers at boot (e.g., Microsoft to Warning)&#10;builder.Host.UseSerilog((ctx, lc) =&gt; lc.ReadFrom.Configuration(ctx.Configuration));&#10;&#10;// MVC + conditionally add runtime compilation only for local dev&#10;var mvcBuilder = builder.Services.AddControllersWithViews();&#10;if (builder.Environment.IsDevelopment())&#10;{&#10;    mvcBuilder.AddRazorRuntimeCompilation();&#10;}&#10;&#10;builder.Services.AddHttpContextAccessor();&#10;&#10;// Maintenance state&#10;builder.Services.AddSingleton&lt;DebtManager.Web.Services.IMaintenanceState, DebtManager.Web.Services.MaintenanceState&gt;();&#10;&#10;// Health checks&#10;builder.Services.AddHealthChecks();&#10;&#10;// Distributed cache (Redis)&#10;var redisCs = builder.Configuration.GetConnectionString(&quot;Redis&quot;)&#10;    ?? builder.Configuration[&quot;Redis:ConnectionString&quot;]&#10;    ?? Environment.GetEnvironmentVariable(&quot;REDIS_CONNECTION&quot;);&#10;if (!string.IsNullOrWhiteSpace(redisCs))&#10;{&#10;    builder.Services.AddStackExchangeRedisCache(options =&gt;&#10;    {&#10;        options.Configuration = redisCs;&#10;        options.InstanceName = &quot;adeva:&quot;;&#10;    });&#10;}&#10;else&#10;{&#10;    // Fallback: in-memory dist cache (optional). If not added, AppConfigService will fallback to local cache.&#10;    // builder.Services.AddDistributedMemoryCache();&#10;}&#10;&#10;// EF Core&#10;var cs = builder.Configuration.GetConnectionString(&quot;Default&quot;) ?? &quot;Server=(localdb)\\MSSQLLocalDB;Database=DebtManager;Trusted_Connection=True;&quot;;&#10;builder.Services.AddDbContext&lt;AppDbContext&gt;(opts =&gt; opts.UseSqlServer(cs));&#10;&#10;// Identity Core using EF stores&#10;builder.Services&#10;    .AddIdentityCore&lt;ApplicationUser&gt;(options =&gt;&#10;    {&#10;        options.User.RequireUniqueEmail = false; // External identity provides uniqueness by oid&#10;        options.SignIn.RequireConfirmedAccount = false;&#10;        options.Tokens.AuthenticatorTokenProvider = TokenOptions.DefaultAuthenticatorProvider;&#10;    })&#10;    .AddRoles&lt;ApplicationRole&gt;()&#10;    .AddEntityFrameworkStores&lt;AppDbContext&gt;()&#10;    .AddSignInManager()&#10;    .AddDefaultTokenProviders();&#10;&#10;// Configure authentication: Cookies as default auth, OIDC as challenge.&#10;builder.Services&#10;    .AddAuthentication(options =&gt;&#10;    {&#10;        options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;&#10;        options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;&#10;    })&#10;    .AddMicrosoftIdentityWebApp(options =&gt;&#10;    {&#10;        var b2c = builder.Configuration.GetSection(&quot;AzureAdB2C&quot;);&#10;        options.ClientId = b2c[&quot;ClientId&quot;]!;&#10;        options.Instance = b2c[&quot;Instance&quot;] ?? &quot;https://jsraauth.b2clogin.com/&quot;;&#10;        options.Domain = b2c[&quot;Domain&quot;] ?? &quot;jsraauth.onmicrosoft.com&quot;;&#10;        options.Authority = b2c[&quot;Authority&quot;]!;&#10;        options.ClientSecret = b2c[&quot;ClientSecret&quot;]; // Added client secret&#10;        options.CallbackPath = b2c[&quot;CallbackPath&quot;] ?? &quot;/signin-oidc&quot;;&#10;        options.SignedOutCallbackPath = b2c[&quot;SignedOutCallbackPath&quot;] ?? &quot;/signout-callback-oidc&quot;;&#10;        options.TokenValidationParameters.NameClaimType = &quot;name&quot;;&#10;        options.Events = new OpenIdConnectEvents&#10;        {&#10;            OnTokenValidated = async ctx =&gt; await TokenValidatedHandler.OnTokenValidated(ctx)&#10;        };&#10;    })&#10;    .EnableTokenAcquisitionToCallDownstreamApi()&#10;    .AddInMemoryTokenCaches();&#10;&#10;// Configure the cookie handler options (scheme added by MicrosoftIdentityWeb)&#10;builder.Services.Configure&lt;CookieAuthenticationOptions&gt;(CookieAuthenticationDefaults.AuthenticationScheme, options =&gt;&#10;{&#10;    options.LoginPath = &quot;/Dev/Login&quot;;&#10;    options.AccessDeniedPath = &quot;/Dev/Login&quot;;&#10;    options.SlidingExpiration = true;&#10;});&#10;&#10;// Claims transformation to map scopes -&gt; roles&#10;builder.Services.AddScoped&lt;IClaimsTransformation, B2CRoleClaimsTransformation&gt;();&#10;&#10;// Hangfire (SQL Server for persistence and audit)&#10;var hangfireCs = builder.Configuration.GetConnectionString(&quot;Hangfire&quot;) ?? cs;&#10;builder.Services.AddHangfire(cfg =&gt; cfg&#10;    .UseSimpleAssemblyNameTypeSerializer()&#10;    // Avoid forcing Newtonsoft/advanced serializer settings to keep startup lean&#10;    .UseSqlServerStorage(hangfireCs));&#10;// Remove AddHangfireServer to avoid crashing the host when storage is unavailable&#10;// builder.Services.AddHangfireServer();&#10;&#10;// Branding resolver&#10;builder.Services.AddScoped&lt;BrandingResolverMiddleware&gt;();&#10;builder.Services.AddScoped&lt;IAdminService, AdminService&gt;();&#10;&#10;// Messaging services (generic + onboarding orchestration)&#10;builder.Services.AddScoped&lt;IMessageQueueService, MessageQueueService&gt;();&#10;builder.Services.AddScoped&lt;IOnboardingNotificationService, OnboardingNotificationService&gt;();&#10;builder.Services.AddScoped&lt;MessageDispatchJob&gt;();&#10;&#10;// ABR business lookup using runtime-managed API key (via IAppConfigService)&#10;builder.Services.AddScoped&lt;IBusinessLookupService&gt;(sp =&gt;&#10;{&#10;    var logger = sp.GetRequiredService&lt;ILogger&lt;AbrBusinessLookupService&gt;&gt;();&#10;    var cfg = sp.GetRequiredService&lt;IAppConfigService&gt;();&#10;    var key = cfg.GetAsync(&quot;AbrApi:ApiKey&quot;).GetAwaiter().GetResult() ?? string.Empty;&#10;    return new AbrBusinessLookupService(key, logger);&#10;});&#10;&#10;builder.Services.AddInfrastructure(builder.Configuration);&#10;builder.Services.AddApplication();&#10;&#10;builder.Services.AddAuthorization(options =&gt;&#10;{&#10;    var scopes = builder.Configuration.GetSection(&quot;AzureB2CScopes&quot;);&#10;    var userScope = scopes[&quot;User&quot;] ?? string.Empty;&#10;    var clientScope = scopes[&quot;Client&quot;] ?? string.Empty;&#10;    var adminScope = scopes[&quot;Admin&quot;] ?? string.Empty;&#10;    options.AddPolicy(&quot;RequireUserScope&quot;, policy =&gt;&#10;        policy.RequireAssertion(ctx =&gt; ctx.User.HasClaim(&quot;scp&quot;, userScope)));&#10;    options.AddPolicy(&quot;RequireClientScope&quot;, policy =&gt;&#10;        policy.RequireAssertion(ctx =&gt; ctx.User.HasClaim(&quot;scp&quot;, clientScope)));&#10;    options.AddPolicy(&quot;RequireAdminScope&quot;, policy =&gt;&#10;        policy.RequireAssertion(ctx =&gt; ctx.User.HasClaim(&quot;scp&quot;, adminScope)));&#10;});&#10;&#10;var app = builder.Build();&#10;&#10;// Initialize database (lean): migrate; optional seed is handled inside initializer via config flags&#10;var maintenance = app.Services.GetRequiredService&lt;IMaintenanceState&gt;();&#10;try&#10;{&#10;    // await DebtManager.Web.Data.DbInitializer.InitializeAsync(app.Services, app.Environment);&#10;}&#10;catch (Exception ex)&#10;{&#10;    // Enter maintenance mode and log the startup exception. App will stay up and serve 503.&#10;    maintenance.Enable(ex);&#10;    Log.ForContext(&quot;Startup&quot;, true).Error(ex, &quot;Startup initialization failed; entering maintenance mode.&quot;);&#10;}&#10;&#10;app.UseSerilogRequestLogging();&#10;&#10;// Maintenance mode should be evaluated as early as possible&#10;app.UseMaintenanceMode();&#10;&#10;if (!app.Environment.IsDevelopment())&#10;{&#10;    app.UseExceptionHandler(&quot;/Home/Error&quot;);&#10;    app.UseHsts();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;app.UseStaticFiles();&#10;&#10;app.UseRouting();&#10;&#10;app.UseAuthentication();&#10;&#10;// Dev-only auth redirect middleware&#10;if (app.Environment.IsDevelopment() &amp;&amp; app.Configuration.GetValue&lt;bool&gt;(&quot;DevAuth:EnableFakeSignin&quot;))&#10;{&#10;    app.UseMiddleware&lt;DevAuthRedirectMiddleware&gt;();&#10;}&#10;&#10;app.UseAuthorization();&#10;&#10;// Enforce security onboarding (TOTP, phone, client org)&#10;app.UseMiddleware&lt;SecurityEnforcementMiddleware&gt;();&#10;&#10;// Admin bootstrap nudge (after auth)&#10;app.UseMiddleware&lt;BootstrapNudgeMiddleware&gt;();&#10;&#10;app.UseMiddleware&lt;BrandingResolverMiddleware&gt;();&#10;&#10;app.MapHealthChecks(&quot;/health/live&quot;);&#10;app.MapHealthChecks(&quot;/health/ready&quot;);&#10;&#10;// Hangfire Dashboard - Secured with Admin scope&#10;app.MapHangfireDashboard(&quot;/hangfire&quot;, new Hangfire.DashboardOptions&#10;{&#10;    Authorization = new[] { new HangfireAuthorizationFilter() }&#10;});&#10;&#10;// Areas routing&#10;app.MapControllerRoute(&#10;    name: &quot;areas&quot;,&#10;    pattern: &quot;{area:exists}/{controller=Home}/{action=Index}/{id?}&quot;);&#10;&#10;// Default route&#10;app.MapControllerRoute(&#10;    name: &quot;default&quot;,&#10;    pattern: &quot;{controller=Home}/{action=Index}/{id?}&quot;);&#10;&#10;// Simple API for recipient search (admin)&#10;app.MapGet(&quot;/api/admin/usersearch&quot;, async ([FromQuery] string q, AppDbContext db) =&gt;&#10;{&#10;    if (string.IsNullOrWhiteSpace(q) || q.Length &lt; 2) return Results.Json(Array.Empty&lt;object&gt;());&#10;    q = q.ToLowerInvariant();&#10;    var results = await db.Users&#10;        .Where(u =&gt; (u.Email ?? &quot;&quot;).ToLower().Contains(q) || (u.UserName ?? &quot;&quot;).ToLower().Contains(q))&#10;        .OrderBy(u =&gt; u.Email)&#10;        .Take(10)&#10;        .Select(u =&gt; new { id = u.Id, name = u.UserName ?? u.Email ?? &quot;Unknown&quot;, email = u.Email ?? string.Empty })&#10;        .ToListAsync();&#10;    return Results.Json(results);&#10;}).RequireAuthorization(new AuthorizeAttribute { Policy = &quot;RequireAdminScope&quot; });&#10;&#10;// Configure recurring jobs only if not in maintenance and server is enabled&#10;if (!maintenance.IsMaintenance)&#10;{&#10;    var serverEnabled = app.Configuration.GetValue&lt;bool&gt;(&quot;Hangfire:ServerEnabled&quot;);&#10;    if (serverEnabled)&#10;    {&#10;        BackgroundJobServer? server = null;&#10;        try&#10;        {&#10;            server = new BackgroundJobServer();&#10;            // Configure recurring jobs&#10;            DebtManager.Web.Jobs.NightlyJobs.ConfigureRecurringJobs();&#10;            RecurringJob.AddOrUpdate(&quot;dispatch-queued-messages-di&quot;, () =&gt; app.Services.GetRequiredService&lt;MessageDispatchJob&gt;().RunAsync(CancellationToken.None), Cron.Minutely);&#10;            // Dispose server gracefully on shutdown&#10;            var lifetime = app.Services.GetRequiredService&lt;IHostApplicationLifetime&gt;();&#10;            lifetime.ApplicationStopping.Register(() =&gt; server.Dispose());&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            maintenance.Enable(ex);&#10;            Log.Error(ex, &quot;Failed to start Hangfire server; entering maintenance mode.&quot;);&#10;        }&#10;    }&#10;}&#10;&#10;app.Run();&#10;&#10;// Expose Program for WebApplicationFactory in tests&#10;public partial class Program { }&#10;&#10;// For convenience: you can bundle lean startup tuning into a helper and call it here.&#10;// Example (not invoked):&#10;// LeanStartup.Apply(builder); // Uncomment to apply additional lean settings in one place." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>