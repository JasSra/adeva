@inject IConfiguration Configuration
@{
    Layout = "~/Areas/User/Views/Shared/_UserLayout.cshtml";
    var debtId = ViewBag.DebtId;
}

<!-- Stripe.js -->
<script src="https://js.stripe.com/v3/"></script>

<div class="max-w-2xl mx-auto px-4 sm:px-6">
    <div class="bg-white rounded-lg shadow-lg">
        <div class="p-4 sm:p-6 border-b">
            <h3 class="text-lg sm:text-xl font-semibold">Quick Payment</h3>
            <p class="text-sm text-gray-500 mt-1">Secure payment in just 2 clicks</p>
        </div>
        
        <div class="p-4 sm:p-6">
            <!-- Step 1: Find Debt or Load Debt Details -->
            <div id="step-find-debt" class="space-y-4">
                @if (debtId == null)
                {
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Debt Reference Number</label>
                        <div class="flex gap-2">
                            <input 
                                type="text" 
                                id="reference-input"
                                class="flex-1 border border-gray-300 rounded-lg px-4 py-3 text-base"
                                placeholder="e.g., D-5001 or ACC123456"
                                required />
                            <button 
                                type="button"
                                id="find-debt-btn"
                                class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium whitespace-nowrap">
                                Find Debt
                            </button>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Enter your debt reference to continue</p>
                    </div>
                }
                else
                {
                    <input type="hidden" id="debt-id" value="@debtId" />
                }
            </div>

            <!-- Debt Summary (initially hidden if debtId is null) -->
            <div id="debt-summary" class="@(debtId == null ? "hidden" : "") mt-6">
                <div class="mb-6 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-100">
                    <h4 class="font-semibold text-gray-900 mb-3">Payment Summary</h4>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
                        <div>
                            <p class="text-gray-600">Reference</p>
                            <p class="font-semibold text-gray-900" id="debt-reference">-</p>
                        </div>
                        <div>
                            <p class="text-gray-600">Outstanding Balance</p>
                            <p class="font-bold text-red-600 text-lg" id="debt-amount">-</p>
                        </div>
                    </div>
                </div>

                <!-- Payment Amount -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Payment Amount</label>
                    <div class="relative">
                        <span class="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500 text-lg">$</span>
                        <input 
                            type="number" 
                            id="payment-amount"
                            class="w-full border-2 border-gray-300 rounded-lg pl-10 pr-4 py-3 text-lg font-semibold focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                            placeholder="0.00"
                            step="0.01"
                            min="0.01"
                            required />
                    </div>
                    <div class="flex gap-2 mt-2">
                        <button type="button" class="quick-amount-btn text-xs px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full" data-percentage="25">25%</button>
                        <button type="button" class="quick-amount-btn text-xs px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full" data-percentage="50">50%</button>
                        <button type="button" class="quick-amount-btn text-xs px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full" data-percentage="100">Full Amount</button>
                    </div>
                </div>

                <!-- Payment Methods with Wallet Support -->
                <div class="mb-6">
                    <h4 class="font-medium text-gray-900 mb-3">Choose Payment Method</h4>
                    
                    <!-- Stripe Payment Element Container -->
                    <div id="payment-element" class="mb-4">
                        <!-- Stripe.js will inject payment UI here -->
                    </div>
                    
                    <div class="flex items-center gap-3 mt-3 text-sm text-gray-500">
                        <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                        </svg>
                        <span>Secured by Stripe. Supports Apple Pay, Google Pay, and cards.</span>
                    </div>
                </div>

                <!-- Error Messages -->
                <div id="payment-errors" class="hidden mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700"></div>
                <div id="payment-success" class="hidden mb-4 p-3 bg-green-50 border border-green-200 rounded-lg text-sm text-green-700"></div>

                <!-- Action Buttons -->
                <div class="flex flex-col sm:flex-row gap-3">
                    <button 
                        type="button"
                        id="submit-payment-btn"
                        class="flex-1 px-6 py-4 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg hover:from-green-700 hover:to-green-800 transition font-semibold shadow-lg disabled:opacity-50 disabled:cursor-not-allowed">
                        <span id="submit-text">Pay Now</span>
                        <span id="submit-spinner" class="hidden">
                            <svg class="animate-spin inline-block w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Processing...
                        </span>
                    </button>
                    <a href="/User/Debts" class="px-6 py-4 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition font-medium text-center">
                        Cancel
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="mt-6 text-center text-sm text-gray-500 px-4">
        <p>ðŸ”’ Payments are secured with 256-bit SSL encryption</p>
    </div>
</div>

<script>
    // Configuration
    const STRIPE_PUBLISHABLE_KEY = '@Configuration["Stripe:PublishableKey"]';
    let stripe, elements, paymentElement;
    let currentDebtId = '@debtId' || null;
    let currentAmount = 0;
    let paymentIntentClientSecret = null;

    // Initialize Stripe
    document.addEventListener('DOMContentLoaded', async function() {
        stripe = Stripe(STRIPE_PUBLISHABLE_KEY);
        
        // If debtId is provided, load debt details immediately
        if (currentDebtId) {
            await loadDebtDetails(currentDebtId);
        }

        // Find debt button
        const findDebtBtn = document.getElementById('find-debt-btn');
        if (findDebtBtn) {
            findDebtBtn.addEventListener('click', async function() {
                const reference = document.getElementById('reference-input').value.trim();
                if (!reference) {
                    showError('Please enter a debt reference');
                    return;
                }
                await findDebtByReference(reference);
            });
        }

        // Quick amount buttons
        document.querySelectorAll('.quick-amount-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const percentage = parseInt(this.dataset.percentage);
                const amount = currentAmount * (percentage / 100);
                document.getElementById('payment-amount').value = amount.toFixed(2);
            });
        });

        // Submit payment
        document.getElementById('submit-payment-btn')?.addEventListener('click', handleSubmit);
    });

    async function findDebtByReference(reference) {
        showLoading(true);
        hideError();
        
        try {
            const response = await fetch(`/api/payment/find-by-reference?reference=${encodeURIComponent(reference)}`);
            const data = await response.json();
            
            if (!response.ok) {
                showError(data.error || 'Debt not found');
                return;
            }
            
            currentDebtId = data.debtId;
            document.getElementById('step-find-debt').classList.add('hidden');
            await loadDebtDetails(data.debtId);
        } catch (error) {
            showError('Failed to find debt. Please try again.');
        } finally {
            showLoading(false);
        }
    }

    async function loadDebtDetails(debtId) {
        try {
            // For now, use mock data or make API call to get debt details
            // In production, this would call /api/debts/{debtId}
            const response = await fetch(`/api/payment/find-by-reference?reference=${debtId}`);
            const data = await response.json();
            
            if (response.ok) {
                document.getElementById('debt-reference').textContent = data.reference;
                document.getElementById('debt-amount').textContent = `$${data.amount.toFixed(2)}`;
                document.getElementById('payment-amount').value = data.amount.toFixed(2);
                currentAmount = data.amount;
                
                document.getElementById('debt-summary').classList.remove('hidden');
                
                // Initialize payment element
                await initializePaymentElement(debtId, data.amount, data.currency);
            }
        } catch (error) {
            console.error('Error loading debt details:', error);
        }
    }

    async function initializePaymentElement(debtId, amount, currency = 'AUD') {
        try {
            // Create payment intent
            const response = await fetch('/api/payment/create-intent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ debtId, amount, currency })
            });
            
            const data = await response.json();
            if (!response.ok) {
                showError(data.error || 'Failed to initialize payment');
                return;
            }
            
            paymentIntentClientSecret = data.clientSecret;
            
            // Initialize Stripe Elements
            elements = stripe.elements({ clientSecret: paymentIntentClientSecret });
            
            paymentElement = elements.create('payment', {
                layout: {
                    type: 'accordion',
                    defaultCollapsed: false,
                    radios: true,
                    spacedAccordionItems: true
                },
                wallets: {
                    applePay: 'auto',
                    googlePay: 'auto'
                }
            });
            
            paymentElement.mount('#payment-element');
        } catch (error) {
            console.error('Error initializing payment:', error);
            showError('Failed to initialize payment. Please refresh and try again.');
        }
    }

    async function handleSubmit(e) {
        e.preventDefault();
        
        const amount = parseFloat(document.getElementById('payment-amount').value);
        if (!amount || amount <= 0) {
            showError('Please enter a valid payment amount');
            return;
        }
        
        if (amount > currentAmount) {
            showError('Payment amount cannot exceed outstanding balance');
            return;
        }
        
        setLoading(true);
        hideError();
        
        try {
            const { error } = await stripe.confirmPayment({
                elements,
                confirmParams: {
                    return_url: `${window.location.origin}/User/Payments/Success`,
                },
            });
            
            if (error) {
                showError(error.message);
                setLoading(false);
            }
            // If no error, user will be redirected to return_url
        } catch (error) {
            console.error('Payment error:', error);
            showError('An unexpected error occurred. Please try again.');
            setLoading(false);
        }
    }

    function setLoading(loading) {
        const btn = document.getElementById('submit-payment-btn');
        const text = document.getElementById('submit-text');
        const spinner = document.getElementById('submit-spinner');
        
        btn.disabled = loading;
        if (loading) {
            text.classList.add('hidden');
            spinner.classList.remove('hidden');
        } else {
            text.classList.remove('hidden');
            spinner.classList.add('hidden');
        }
    }

    function showLoading(loading) {
        setLoading(loading);
    }

    function showError(message) {
        const errorDiv = document.getElementById('payment-errors');
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        setTimeout(() => errorDiv.classList.add('hidden'), 5000);
    }

    function hideError() {
        document.getElementById('payment-errors').classList.add('hidden');
    }

    function showSuccess(message) {
        const successDiv = document.getElementById('payment-success');
        successDiv.textContent = message;
        successDiv.classList.remove('hidden');
    }
</script>

                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Payment Amount</label>
                    <div class="relative">
                        <span class="absolute left-4 top-2.5 text-gray-500">$</span>
                        <input type="number" step="0.01" min="0" value="500.00" class="w-full border border-gray-300 rounded-lg pl-8 pr-4 py-2" placeholder="0.00" />
                    </div>
                    <div class="mt-2 flex gap-2">
                        <button type="button" class="px-3 py-1 bg-gray-100 text-gray-700 rounded text-sm hover:bg-gray-200">Min: $500</button>
                        <button type="button" class="px-3 py-1 bg-gray-100 text-gray-700 rounded text-sm hover:bg-gray-200">Full: $3,250</button>
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Payment Method</label>
                    <div class="space-y-2">
                        <label class="flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="paymentMethod" value="card" checked class="mr-3" />
                            <svg class="w-6 h-6 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                            </svg>
                            <span class="font-medium">Credit/Debit Card</span>
                        </label>
                        <label class="flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="paymentMethod" value="bank" class="mr-3" />
                            <svg class="w-6 h-6 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
                            </svg>
                            <span class="font-medium">Bank Transfer</span>
                        </label>
                    </div>
                </div>
                
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-blue-700">
                                <strong>Secure Payment</strong><br/>
                                Your payment information is encrypted and secure. We use industry-standard security measures to protect your data.
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="flex gap-3">
                    <button type="submit" class="flex-1 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-medium">
                        Proceed to Payment
                    </button>
                    <a href="/User/Debts" class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition font-medium">
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
    
    <div class="mt-6 text-center text-sm text-gray-500">
        <p>By proceeding, you agree to our <a href="#" class="text-blue-600 hover:underline">Terms and Conditions</a></p>
    </div>
</div>
