@model DebtManager.Web.Areas.Admin.Controllers.SecretsVm
@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "Secrets & Configuration";
}

<div class="mb-6">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">üîê Secrets & Configuration</h2>
    <p class="text-sm text-gray-600 dark:text-gray-400">Manage runtime configuration and sensitive credentials</p>
</div>

<!-- Navigation Tabs -->
<div class="mb-6">
    <ul class="flex flex-wrap border-b border-gray-200 dark:border-gray-700">
        <li class="mr-1">
            <a href="/Admin/Configuration" class="inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">General</a>
        </li>
        <li class="mr-1">
            <a href="/Admin/Configuration/Fees" class="inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">Fees</a>
        </li>
        <li class="mr-1">
            <a href="/Admin/Configuration/Branding" class="inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">Branding</a>
        </li>
        <li class="mr-1">
            <a href="/Admin/Configuration/Integrations" class="inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">Integrations</a>
        </li>
        <li class="mr-1">
            <span class="inline-block py-3 px-4 bg-blue-50 dark:bg-blue-900/50 border-b-2 border-blue-600 text-blue-600 dark:text-blue-400 font-semibold">Secrets</span>
        </li>
        <li class="mr-1">
            <a href="/Admin/Audit" class="inline-block py-3 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">üìã Audit Log</a>
        </li>
    </ul>
</div>

@if (TempData["Message"] is string msg)
{
    <div class="mb-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 rounded-lg">
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            @msg
        </div>
    </div>
}

<!-- Health Status -->
@if (!Model.Health.IsBootstrapComplete)
{
    <div class="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 rounded-lg">
        <div class="flex items-start">
            <svg class="w-6 h-6 text-red-600 dark:text-red-400 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
            <div>
                <h4 class="font-bold text-red-800 dark:text-red-200">‚ö†Ô∏è Bootstrap Required (@Model.Health.Environment)</h4>
                <p class="text-sm text-red-700 dark:text-red-300 mt-1">The following critical configuration keys are missing:</p>
                <ul class="list-disc ml-5 mt-2 text-sm text-red-700 dark:text-red-300">
                    @foreach (var k in Model.Health.MissingKeys) { <li><code class="bg-red-100 dark:bg-red-900/50 px-1 rounded">@k</code></li> }
                </ul>
            </div>
        </div>
    </div>
}

@if (Model.Health.Warnings.Any())
{
    <div class="mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 rounded-lg">
        <h4 class="font-bold text-yellow-800 dark:text-yellow-200 mb-2">‚ö†Ô∏è Configuration Warnings</h4>
        <ul class="list-disc ml-5 text-sm text-yellow-700 dark:text-yellow-300">
            @foreach (var w in Model.Health.Warnings) { <li>@w</li> }
        </ul>
    </div>
}

<!-- Search -->
<div class="mb-6">
    <form method="get" action="/Admin/Configuration/Secrets" class="flex gap-2">
        <div class="relative flex-1">
            <svg class="absolute left-3 top-3 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
            <input type="text" name="q" value="@Model.Query" 
                   class="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                   placeholder="Search configuration keys (e.g., Stripe, Twilio, OpenAI)" />
        </div>
        <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium">
            Search
        </button>
        @if (!string.IsNullOrEmpty(Model.Query))
        {
            <a href="/Admin/Configuration/Secrets" class="px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition font-medium">
                Clear
            </a>
        }
    </form>
</div>

<!-- Add New Entry -->
<div class="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
    <div class="p-6 border-b border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
            Add or Update Configuration Entry
        </h3>
    </div>
    <div class="p-6">
        <form action="/Admin/Configuration/Save" method="post" class="space-y-4">
            @Html.AntiForgeryToken()
            <div class="grid md:grid-cols-3 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Key *</label>
                    <input name="Key" type="text" required
                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                           placeholder="e.g., Stripe:SecretKey" />
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Use colon (:) for namespacing</p>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Value *</label>
                    <input name="Value" type="text" required
                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                           placeholder="Enter value" />
                </div>
                <div class="flex items-end">
                    <label class="inline-flex items-center gap-2 px-4 py-2 bg-gray-50 dark:bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition">
                        <input type="checkbox" name="IsSecret" class="w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500" />
                        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">üîí Mark as Secret</span>
                    </label>
                </div>
            </div>
            <div class="flex gap-2">
                <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium">
                    üíæ Save Configuration
                </button>
                <button type="reset" class="px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition font-medium">
                    Clear Form
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Configuration Groups -->
@foreach (var group in Model.Groups)
{
    <div class="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
        <div class="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/30 dark:to-indigo-900/30 border-b border-gray-200 dark:border-gray-700 rounded-t-lg">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
                <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>
                </svg>
                @group.Key
                <span class="ml-auto text-sm font-normal text-gray-600 dark:text-gray-400">@group.Value.Count entries</span>
            </h3>
        </div>
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">Key</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">Value</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">Type</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                @foreach (var c in group.Value)
                {
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition">
                        <td class="px-6 py-4">
                            <code class="text-sm font-mono text-blue-600 dark:text-blue-400">@c.Key</code>
                        </td>
                        <td class="px-6 py-4">
                            @if (c.IsSecret)
                            {
                                <div class="flex items-center gap-2">
                                    <span class="text-sm font-mono text-gray-400 dark:text-gray-500" id="secret-@c.Key.Replace(":", "-")">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>
                                    <button type="button" onclick="toggleSecret('@c.Key.Replace(":", "-")', '@c.Value')" 
                                            class="text-xs text-blue-600 dark:text-blue-400 hover:underline">
                                        üëÅÔ∏è Show
                                    </button>
                                </div>
                            }
                            else
                            {
                                <span class="text-sm font-mono text-gray-900 dark:text-gray-100">@(string.IsNullOrEmpty(c.Value) ? "(empty)" : c.Value)</span>
                            }
                        </td>
                        <td class="px-6 py-4">
                            @if (c.IsSecret)
                            {
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200">
                                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/>
                                    </svg>
                                    Secret
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                                    Plain
                                </span>
                            }
                        </td>
                        <td class="px-6 py-4 text-right">
                            <div class="flex items-center justify-end gap-2">
                                <button onclick="editConfig('@c.Key', '@c.Value', @c.IsSecret.ToString().ToLower())" 
                                        class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium text-sm">
                                    ‚úèÔ∏è Edit
                                </button>
                                <form action="/Admin/Configuration/Delete" method="post" class="inline" 
                                      onsubmit="return confirm('Are you sure you want to delete @c.Key?');">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="key" value="@c.Key" />
                                    <button type="submit" class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 font-medium text-sm">
                                        üóëÔ∏è Delete
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}

@if (!Model.Entries.Any())
{
    <div class="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700">
        <svg class="mx-auto w-16 h-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No Configuration Entries Found</h3>
        <p class="text-gray-600 dark:text-gray-400">Add your first configuration entry above to get started.</p>
    </div>
}

<script>
function toggleSecret(id, value) {
    const element = document.getElementById('secret-' + id);
    const button = element.nextElementSibling;
    
    if (element.textContent === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') {
        element.textContent = value;
        button.textContent = 'üôà Hide';
    } else {
        element.textContent = '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
        button.textContent = 'üëÅÔ∏è Show';
    }
}

function editConfig(key, value, isSecret) {
    const form = document.querySelector('form[action="/Admin/Configuration/Save"]');
    form.querySelector('input[name="Key"]').value = key;
    form.querySelector('input[name="Value"]').value = value;
    form.querySelector('input[name="IsSecret"]').checked = isSecret;
    
    // Scroll to form
    form.scrollIntoView({ behavior: 'smooth', block: 'center' });
    
    // Highlight form
    form.classList.add('ring-4', 'ring-blue-300');
    setTimeout(() => form.classList.remove('ring-4', 'ring-blue-300'), 2000);
}
</script>
