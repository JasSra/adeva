@model IEnumerable<DebtManager.Domain.Organizations.Organization>
@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    var page = (int)ViewBag.Page;
    var pageSize = (int)ViewBag.PageSize;
    var totalCount = (int)ViewBag.TotalCount;
    var totalPages = (int)ViewBag.TotalPages;
    var search = ViewBag.Search as string;
}

@if (TempData["Message"] != null)
{
    <div class="app-flash app-flash--success app-section" role="status">
        <span class="app-flash__icon" aria-hidden="true">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
        </span>
        <div class="app-flash__content">
            <p class="app-flash__message">@TempData["Message"]</p>
        </div>
    </div>
}

<section class="app-section">
    <div class="app-surface">
        <div class="app-surface-header">
            <div class="space-y-1">
                <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100">Pending applications</h3>
                <p class="text-sm text-slate-500 dark:text-slate-400">
                    Monitor organizations awaiting approval and manage onboarding decisions.
                </p>
            </div>
            <form method="get" action="@Url.Action("Index")" class="app-filters" role="search">
                <label for="search" class="sr-only">Search applications</label>
                <input id="search" type="text" name="search" value="@search" placeholder="Search by name, legal name or ABN…" />
                <button type="submit" data-size="sm">Search</button>
            </form>
        </div>
        <div class="app-surface-body">
            <div class="app-table-wrap">
                <table class="app-table">
                    <thead>
                        <tr>
                            <th scope="col">Organization</th>
                            <th scope="col">Legal Name</th>
                            <th scope="col">ABN</th>
                            <th scope="col">Subdomain</th>
                            <th scope="col">Submitted</th>
                            <th scope="col">Status</th>
                            <th scope="col" class="text-right">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            foreach (var org in Model)
                            {
                                <tr>
                                    <td>@org.Name</td>
                                    <td>@org.LegalName</td>
                                    <td>@org.Abn</td>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(org.Subdomain))
                                        {
                                            <span class="text-slate-700 dark:text-slate-200">@org.Subdomain</span>
                                        }
                                        else
                                        {
                                            <span class="text-slate-400 dark:text-slate-500">—</span>
                                        }
                                    </td>
                                    <td class="text-slate-500 dark:text-slate-400">@org.CreatedAtUtc.ToString("yyyy-MM-dd HH:mm") UTC</td>
                                    <td>
                                        <span class="app-chip app-chip--warning">Pending review</span>
                                    </td>
                                    <td class="text-right">
                                        <div class="flex items-center justify-end gap-2">
                                            <a href="@Url.Action("Details", new { id = org.Id })" class="btn-ghost text-sm">View</a>
                                            <form method="post" action="@Url.Action("Approve", new { id = org.Id })" class="inline">
                                                @Html.AntiForgeryToken()
                                                <button data-unstyled="true" type="submit" class="btn text-sm" onclick="return confirm('Approve this application?');">Approve</button>
                                            </form>
                                            <button data-unstyled="true" type="button" class="btn-danger-outline text-sm" onclick="showRejectModal('@org.Id', '@org.Name')">Reject</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7">
                                    <div class="app-empty-state">
                                        @if (!string.IsNullOrEmpty(search))
                                        {
                                            <span>No pending applications found matching <strong>@search</strong>.</span>
                                        }
                                        else
                                        {
                                            <span>No pending applications at this time.</span>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @if (totalPages > 0)
        {
            <div class="app-surface-footer">
                <div class="text-sm text-slate-500 dark:text-slate-400">
                    Showing @((page - 1) * pageSize + 1) to @Math.Min(page * pageSize, totalCount) of @totalCount entries
                </div>
                <div class="app-pagination">
                    @if (page > 1)
                    {
                        <a href="@Url.Action("Index", new { search, page = page - 1, pageSize })">Previous</a>
                    }
                    else
                    {
                        <span class="is-disabled">Previous</span>
                    }

                    @for (int i = Math.Max(1, page - 2); i <= Math.Min(totalPages, page + 2); i++)
                    {
                        if (i == page)
                        {
                            <span class="is-current">@i</span>
                        }
                        else
                        {
                            <a href="@Url.Action("Index", new { search, page = i, pageSize })">@i</a>
                        }
                    }

                    @if (page < totalPages)
                    {
                        <a href="@Url.Action("Index", new { search, page = page + 1, pageSize })">Next</a>
                    }
                    else
                    {
                        <span class="is-disabled">Next</span>
                    }
                </div>
            </div>
        }
    </div>
</section>

<div id="rejectModal" class="hidden fixed inset-0 z-50 app-modal items-center justify-center">
    <div class="app-modal__dialog">
        <div class="flex items-start justify-between gap-4 mb-4">
            <div>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100">Reject application</h3>
                <p class="text-sm text-slate-500 dark:text-slate-400">Let the applicant know why they were rejected.</p>
            </div>
            <button data-unstyled="true" type="button" class="btn-ghost text-sm" onclick="hideRejectModal()" aria-label="Close modal">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <form id="rejectForm" method="post" class="space-y-4">
            @Html.AntiForgeryToken()
            <input type="hidden" id="rejectOrgId" name="id" value="" />
            <div>
                <label class="text-sm font-medium text-slate-600 dark:text-slate-300">Organization</label>
                <p id="rejectOrgName" class="mt-1 text-sm text-slate-500 dark:text-slate-400"></p>
            </div>
            <div>
                <label for="reason" class="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-2">Reason for rejection</label>
                <textarea id="reason" name="reason" rows="4" required placeholder="Share context so the applicant understands the next steps."></textarea>
            </div>
            <div class="flex items-center justify-end gap-2">
                <button data-unstyled="true" type="button" class="btn-ghost text-sm" onclick="hideRejectModal()">Cancel</button>
                <button data-unstyled="true" type="submit" class="btn-danger text-sm">Reject application</button>
            </div>
        </form>
    </div>
</div>

<script>
function showRejectModal(orgId, orgName) {
    const modal = document.getElementById('rejectModal');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    document.getElementById('rejectOrgId').value = orgId;
    document.getElementById('rejectOrgName').textContent = orgName;
    document.getElementById('rejectForm').action = '@Url.Action("Reject")/' + orgId;
}

function hideRejectModal() {
    const modal = document.getElementById('rejectModal');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    document.getElementById('reason').value = '';
}
</script>
