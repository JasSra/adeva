@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "Test Scenarios";
}

<div class="mb-6">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Test Scenarios</h2>
    <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
        Create realistic orgs, debtors, debts and users for end-to-end testing. All records are tagged as dummy and can be cleared.
    </p>
</div>

@* Database Status Banner *@
@if (ViewBag.DatabaseConnected == false)
{
    <div class="mb-6 bg-red-50 border-2 border-red-500 text-red-900 px-4 py-4 rounded-lg">
        <div class="flex items-start">
            <svg class="w-6 h-6 mr-3 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
            <div class="flex-1">
                <h3 class="font-bold text-lg">‚ùå Database Not Connected</h3>
                <p class="mt-2">Cannot connect to SQL Server on localhost:1433. The Scenarios buttons will not work until the database is running.</p>
                <div class="mt-3 p-3 bg-red-100 rounded border border-red-300">
                    <p class="font-semibold mb-1">To start SQL Server:</p>
                    <code class="block bg-gray-900 text-green-400 px-3 py-2 rounded mt-2 font-mono text-sm">cd deploy && docker compose up -d</code>
                </div>
            </div>
        </div>
    </div>
}
else if (ViewBag.DatabaseConnected == true)
{
    <div class="mb-6 bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded">
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <span class="font-medium">‚úÖ Database Connected - SQL Server on localhost:1433</span>
        </div>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="mb-6 bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded">
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <span>@TempData["SuccessMessage"]</span>
        </div>
        @if (TempData["AcceptUrl"] != null)
        {
            <div class="mt-4 p-4 bg-white border border-green-300 rounded">
                <h4 class="font-semibold text-green-900 mb-2">üéØ Test Accept Debt Page:</h4>
                <div class="space-y-2">
                    <div>
                        <span class="text-sm font-medium">Debtor Email:</span>
                        <code class="ml-2 px-2 py-1 bg-gray-100 rounded text-sm">@TempData["TestDebtorEmail"]</code>
                    </div>
                    <div>
                        <span class="text-sm font-medium">Client Email:</span>
                        <code class="ml-2 px-2 py-1 bg-gray-100 rounded text-sm">@TempData["TestClientEmail"]</code>
                    </div>
                    <div>
                        <span class="text-sm font-medium">Accept URL:</span>
                        <div class="mt-1 flex gap-2">
                            <code class="flex-1 px-2 py-1 bg-gray-100 rounded text-sm">@TempData["AcceptUrl"]</code>
                            <button onclick="copyAcceptUrl('@TempData["AcceptUrl"]')" class="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">Copy</button>
                        </div>
                    </div>
                    <div class="mt-3 flex gap-2">
                        <a href="/Dev/Impersonate?email=@TempData["TestDebtorEmail"]" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 text-sm">
                            üé≠ Impersonate Debtor
                        </a>
                        <a href="@TempData["AcceptUrl"]" target="_blank" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                            üîó Open Accept Page
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="mb-6 bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded">
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
            @TempData["ErrorMessage"]
        </div>
    </div>
}

@if (ViewBag.HasDummyData == true)
{
    <!-- Stats Overview -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            <p class="text-sm text-gray-600 dark:text-gray-400">Organizations</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1">@ViewBag.OrganizationCount</p>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            <p class="text-sm text-gray-600 dark:text-gray-400">Debtors</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1">@ViewBag.DebtorCount</p>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            <p class="text-sm text-gray-600 dark:text-gray-400">Debts</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1">@ViewBag.DebtCount</p>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            <p class="text-sm text-gray-600 dark:text-gray-400">Payment Plans</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1">@ViewBag.PaymentPlanCount</p>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            <p class="text-sm text-gray-600 dark:text-gray-400">Transactions</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1">@ViewBag.TransactionCount</p>
        </div>
    </div>
}

<!-- Quick Actions: always visible -->
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Quick Debtor Case</h3>
            <p class="text-xs text-gray-500">Creates org (if needed), debtor, debt, and user accounts. Then impersonate to test UX.</p>
        </div>
        <div class="p-4">
            <form method="post" action="/Admin/Scenarios/QuickDebtorCase" class="space-y-3">
                @Html.AntiForgeryToken()
                <div>
                    <label class="block text-sm">Organization Name</label>
                    <input name="orgName" class="border p-2 w-full rounded" placeholder="@ViewBag.QuickOrg" value="@ViewBag.QuickOrg" />
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <div>
                        <label class="block text-sm">Debtor First Name</label>
                        <input name="debtorFirstName" class="border p-2 w-full rounded" placeholder="@ViewBag.QuickFirst" value="@ViewBag.QuickFirst" />
                    </div>
                    <div>
                        <label class="block text-sm">Debtor Last Name</label>
                        <input name="debtorLastName" class="border p-2 w-full rounded" placeholder="@ViewBag.QuickLast" value="@ViewBag.QuickLast" />
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <div>
                        <label class="block text-sm">Debtor Email</label>
                        <input name="debtorEmail" class="border p-2 w-full rounded" placeholder="@ViewBag.QuickEmail" value="@ViewBag.QuickEmail" />
                    </div>
                    <div>
                        <label class="block text-sm">Phone</label>
                        <input name="phone" class="border p-2 w-full rounded" placeholder="@ViewBag.QuickPhone" value="@ViewBag.QuickPhone" />
                    </div>
                </div>
                <div>
                    <label class="block text-sm">Debt Amount (AUD)</label>
                    <input name="amount" type="number" step="0.01" value="@ViewBag.QuickAmount" class="border p-2 w-full rounded" />
                </div>
                <div class="flex items-center justify-between">
                    <a href="/Dev/Impersonate" class="text-sm text-blue-600">Go to Impersonate</a>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Create</button>
                </div>
            </form>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Generate Scenario Pack</h3>
            <p class="text-xs text-gray-500">Creates multiple orgs, customers, debts, plans and transactions.</p>
        </div>
        <div class="p-4">
            <form method="post" action="/Admin/Scenarios/Generate" class="grid grid-cols-1 md:grid-cols-2 gap-4 text-left">
                @Html.AntiForgeryToken()
                <div class="md:col-span-2">
                    <label class="block text-sm">Pack Name</label>
                    <input name="PackName" class="border p-2 w-full rounded" placeholder="e.g. Demo Pack" />
                    <input type="hidden" name="Currency" value="AUD" />
                </div>
                <div>
                    <label class="block text-sm">Active Orgs</label>
                    <input name="ActiveOrganizations" type="number" value="1" class="border p-2 w-full rounded" />
                </div>
                <div>
                    <label class="block text-sm">Recent Orgs</label>
                    <input name="RecentOrganizations" type="number" value="1" class="border p-2 w-full rounded" />
                </div>
                <div class="md:col-span-2">
                    <label class="block text-sm">Customers per Org (New/Inv/Active/Delinq/Settled)</label>
                    <div class="grid grid-cols-5 gap-2">
                        <input name="NewCustomersPerOrg" type="number" value="2" class="border p-2 w-full rounded" />
                        <input name="InvitedCustomersPerOrg" type="number" value="2" class="border p-2 w-full rounded" />
                        <input name="ActiveCustomersPerOrg" type="number" value="3" class="border p-2 w-full rounded" />
                        <input name="DelinquentCustomersPerOrg" type="number" value="2" class="border p-2 w-full rounded" />
                        <input name="SettledCustomersPerOrg" type="number" value="1" class="border p-2 w-full rounded" />
                    </div>
                </div>
                <div class="flex items-end gap-3 md:col-span-2">
                    <label class="inline-flex items-center text-sm">
                        <input type="checkbox" name="IncludePaymentPlans" checked class="mr-2" /> Plans
                    </label>
                    <label class="inline-flex items-center text-sm">
                        <input type="checkbox" name="IncludeTransactions" checked class="mr-2" /> Transactions
                    </label>
                </div>
                <div class="md:col-span-2">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Generate Pack</button>
                </div>
            </form>
            <p class="text-xs text-gray-500 mt-3">Impersonation users are created automatically for quick testing.</p>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Maintenance</h3>
        </div>
        <div class="p-4 space-y-3">
            <form method="post" action="/Admin/Scenarios/Clear" onsubmit="return confirm('Clear all dummy data?');">
                @Html.AntiForgeryToken()
                <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 w-full">Clear All Dummy Data</button>
            </form>
            <a href="/Dev/Impersonate" class="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded w-full inline-block text-center">Impersonate Users</a>
            <div class="text-xs text-gray-500">Tip: Impersonate client to see Client dashboard; impersonate debtor to see debts in User area.</div>
        </div>
    </div>
</div>

<!-- Links -->
<div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Explore Data</h3>
    <div class="flex flex-wrap gap-3 items-center">
        <a href="/Admin/Organizations?search=&status=" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">View Organizations</a>
        <a href="/Admin/Debtors" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">View Debtors</a>
        <a href="/Admin/Debts" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">View Debts</a>
        <a href="/Admin/Payments" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">View Payments</a>
    </div>
</div>

<script>
function copyAcceptUrl(url) {
    navigator.clipboard.writeText(window.location.origin + url).then(() => {
        alert('Accept URL copied to clipboard!');
    });
}
</script>
