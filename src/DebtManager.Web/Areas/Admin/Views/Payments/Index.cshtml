@model IEnumerable<DebtManager.Domain.Payments.Transaction>
@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    var page = (int)ViewBag.Page;
    var pageSize = (int)ViewBag.PageSize;
    var totalCount = (int)ViewBag.TotalCount;
    var totalPages = (int)ViewBag.TotalPages;
}

<!-- Page Header with Action Buttons -->
<div class="mb-6 flex items-center justify-between">
    <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
            <svg class="w-7 h-7 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            Payments
        </h1>
        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Manage and monitor payment transactions</p>
    </div>
    <div class="flex gap-2">
        <a href="/Admin/Payments/RetryFailed" class="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition font-medium flex items-center shadow-md">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Retry Failed
        </a>
        <a href="/Admin/Payments/CreateAdhoc" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-medium flex items-center shadow-md">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Create Adhoc Payment
        </a>
    </div>
</div>

<form method="get" action="@Url.Action("Index")" class="bg-white dark:bg-gray-800 rounded-lg shadow">
    <div class="p-6 border-b dark:border-gray-700 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Transaction List</h3>
        <div class="flex flex-wrap gap-2">
            <select name="status" class="border dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded px-3 py-2 text-sm">
                <option value="">All Status</option>
                <option value="succeeded" @(ViewBag.Status == "succeeded" ? "selected" : "")>‚úì Succeeded</option>
                <option value="pending" @(ViewBag.Status == "pending" ? "selected" : "")>‚è± Pending</option>
                <option value="failed" @(ViewBag.Status == "failed" ? "selected" : "")>‚úó Failed</option>
            </select>
            <input type="text" name="search" value="@ViewBag.Search" placeholder="Search payments..." class="border dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded px-3 py-2 text-sm" />
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm font-medium flex items-center">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                Search
            </button>
            @if (!string.IsNullOrEmpty(ViewBag.Search as string) || !string.IsNullOrEmpty(ViewBag.Status as string))
            {
                <a href="@Url.Action("Index")" class="px-4 py-2 border dark:border-gray-600 rounded text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    Clear
                </a>
            }
        </div>
    </div>
</form>

<div class="bg-white dark:bg-gray-800 rounded-lg shadow mt-4">
    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="bg-gray-50 dark:bg-gray-700 border-b dark:border-gray-600">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Reference</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Debtor</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Amount</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Method</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Provider</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                @if (Model != null && Model.Any())
                {
                    @foreach (var payment in Model)
                    {
                        <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition">
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @payment.ProcessedAtUtc.ToString("yyyy-MM-dd HH:mm")
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                @(payment.ProviderRef ?? "-")
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                @if (payment.Debtor != null)
                                {
                                    <div>@payment.Debtor.FirstName @payment.Debtor.LastName</div>
                                    <div class="text-xs text-gray-500">@payment.Debtor.Email</div>
                                }
                                else
                                {
                                    <text>-</text>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                @payment.Currency @payment.Amount.ToString("N2")
                                @if (payment.FeeAmount.HasValue && payment.FeeAmount.Value > 0)
                                {
                                    <div class="text-xs text-gray-500">Fee: @payment.FeeCurrency @payment.FeeAmount.Value.ToString("N2")</div>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                @{
                                    var methodIcon = payment.Method switch
                                    {
                                        DebtManager.Domain.Payments.PaymentMethod.Card => "üí≥",
                                        DebtManager.Domain.Payments.PaymentMethod.BankTransfer => "üè¶",
                                        DebtManager.Domain.Payments.PaymentMethod.DirectDebit => "üìä",
                                        _ => "üí∞"
                                    };
                                }
                                <span>@methodIcon @payment.Method</span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                @payment.Provider
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{
                                    var (statusClass, statusIcon) = payment.Status switch
                                    {
                                        DebtManager.Domain.Payments.TransactionStatus.Succeeded => ("bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300", "‚úì"),
                                        DebtManager.Domain.Payments.TransactionStatus.Pending => ("bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300", "‚è±"),
                                        DebtManager.Domain.Payments.TransactionStatus.Failed => ("bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300", "‚úó"),
                                        DebtManager.Domain.Payments.TransactionStatus.Refunded => ("bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300", "‚Ü©"),
                                        DebtManager.Domain.Payments.TransactionStatus.Cancelled => ("bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300", "‚äò"),
                                        _ => ("bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300", "?")
                                    };
                                }
                                <span class="inline-flex items-center px-2 py-1 text-xs font-bold rounded-full @statusClass">
                                    <span class="mr-1">@statusIcon</span>
                                    @payment.Status
                                </span>
                                @if (!string.IsNullOrEmpty(payment.FailureReason))
                                {
                                    <div class="text-xs text-red-600 dark:text-red-400 mt-1" title="@payment.FailureReason">@payment.FailureReason.Substring(0, Math.Min(30, payment.FailureReason.Length))...</div>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                <a href="@Url.Action("Details", new { id = payment.Id })" class="text-blue-600 dark:text-blue-400 hover:underline font-medium">
                                    View Details ‚Üí
                                </a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8" class="px-6 py-4 text-center text-sm text-gray-500">
                            @if (!string.IsNullOrEmpty(ViewBag.Search as string) || !string.IsNullOrEmpty(ViewBag.Status as string))
                            {
                                <text>No payments found matching your criteria.</text>
                            }
                            else
                            {
                                <text>No payments available.</text>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    @if (totalPages > 0)
    {
        <div class="p-4 border-t bg-gray-50 flex items-center justify-between">
            <div class="text-sm text-gray-600">
                Showing @((page - 1) * pageSize + 1) to @Math.Min(page * pageSize, totalCount) of @totalCount entries
                @if (totalCount > 0 && Model != null)
                {
                    var totalAmount = Model.Where(p => p.Status == DebtManager.Domain.Payments.TransactionStatus.Succeeded).Sum(p => p.Amount);
                    <span class="ml-4 font-medium">Total (Succeeded): $@totalAmount.ToString("N2")</span>
                }
            </div>
            <div class="flex gap-1">
                @if (page > 1)
                {
                    <a href="@Url.Action("Index", new { search = ViewBag.Search, status = ViewBag.Status, page = page - 1, pageSize })" class="px-3 py-1 border rounded text-sm bg-white hover:bg-gray-100">Previous</a>
                }
                else
                {
                    <button disabled class="px-3 py-1 border rounded text-sm bg-gray-100 text-gray-400 cursor-not-allowed">Previous</button>
                }
                
                @for (int i = Math.Max(1, page - 2); i <= Math.Min(totalPages, page + 2); i++)
                {
                    if (i == page)
                    {
                        <button class="px-3 py-1 border rounded text-sm bg-blue-600 text-white">@i</button>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", new { search = ViewBag.Search, status = ViewBag.Status, page = i, pageSize })" class="px-3 py-1 border rounded text-sm bg-white hover:bg-gray-100">@i</a>
                    }
                }
                
                @if (page < totalPages)
                {
                    <a href="@Url.Action("Index", new { search = ViewBag.Search, status = ViewBag.Status, page = page + 1, pageSize })" class="px-3 py-1 border rounded text-sm bg-white hover:bg-gray-100">Next</a>
                }
                else
                {
                    <button disabled class="px-3 py-1 border rounded text-sm bg-gray-100 text-gray-400 cursor-not-allowed">Next</button>
                }
            </div>
        </div>
    }
</div>
