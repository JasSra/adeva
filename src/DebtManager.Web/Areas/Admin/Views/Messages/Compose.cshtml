@model DebtManager.Web.Areas.Admin.Controllers.ComposeMessageVm
@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "Compose Message";
}

<div class="max-w-3xl mx-auto">
    <h2 class="text-2xl font-bold mb-4">Compose Message</h2>

    @if (TempData["Message"] is string ok)
    {
        <div class="p-3 mb-4 bg-green-100 text-green-800 rounded">@ok</div>
    }

    <form method="post" asp-action="Compose" class="space-y-6" id="composeForm">
        @Html.AntiForgeryToken()

        <div>
            <label class="block text-sm font-medium mb-1">Title *</label>
            <input asp-for="Title" class="w-full border p-2 rounded" />
            <span class="text-red-600 text-sm">@Html.ValidationMessageFor(m => m.Title)</span>
        </div>

        <div>
            <label class="block text-sm font-medium mb-1">Content *</label>
            <textarea asp-for="Content" rows="8" class="w-full border p-2 rounded"></textarea>
            <span class="text-red-600 text-sm">@Html.ValidationMessageFor(m => m.Content)</span>
        </div>

        <div class="grid grid-cols-3 gap-4">
            <div>
                <label class="block text-sm font-medium mb-1">Priority</label>
                <select asp-for="Priority" class="w-full border p-2 rounded">
                    <option value="0">Low</option>
                    <option value="1">Normal</option>
                    <option value="2">High</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium mb-1">Category</label>
                <input asp-for="Category" class="w-full border p-2 rounded" />
            </div>
        </div>

        <fieldset class="border rounded p-4">
            <legend class="text-sm font-semibold">Recipients</legend>
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block"><input type="checkbox" asp-for="SendToAdmins" /> <span>All Admins</span></label>
                    <label class="block"><input type="checkbox" asp-for="SendToClients" /> <span>All Clients</span></label>
                    <label class="block"><input type="checkbox" asp-for="SendToUsers" /> <span>All Users</span></label>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Search and add recipients</label>
                    <input type="text" id="userSearch" placeholder="Search by name or email" class="w-full border p-2 rounded" />
                    <div id="searchResults" class="mt-2 border rounded divide-y hidden"></div>
                    <div id="selectedRecipients" class="mt-2 flex flex-wrap gap-2"></div>
                    <input type="hidden" asp-for="RecipientUserIdsCsv" id="RecipientUserIdsCsv" />
                    <p class="text-xs text-gray-500 mt-1">Fallback: You can paste comma-separated GUIDs above if needed.</p>
                </div>
            </div>
        </fieldset>

        <fieldset class="border rounded p-4">
            <legend class="text-sm font-semibold">Delivery Channels</legend>
            <label class="block"><input type="checkbox" asp-for="SendEmail" /> <span>Email</span></label>
            <label class="block"><input type="checkbox" asp-for="SendSms" /> <span>SMS</span></label>
        </fieldset>

        <fieldset class="border rounded p-4">
            <legend class="text-sm font-semibold">Linking (optional)</legend>
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-medium mb-1">Related Entity Type</label>
                    <input asp-for="RelatedEntityType" class="w-full border p-2 rounded" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Related Entity Id (GUID)</label>
                    <input asp-for="RelatedEntityId" class="w-full border p-2 rounded" />
                </div>
            </div>
        </fieldset>

        <div class="flex gap-2">
            <button class="btn">Queue Message</button>
            <a href="/Admin/Messages/Inbox" class="px-4 py-2 border rounded">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
<script>
(function(){
  const input = document.getElementById('userSearch');
  const results = document.getElementById('searchResults');
  const selected = document.getElementById('selectedRecipients');
  const hidden = document.getElementById('RecipientUserIdsCsv');
  let chosen = new Set();

  async function search(q){
    if(!q || q.length < 2){ results.classList.add('hidden'); results.innerHTML=''; return; }
    const resp = await fetch('/api/admin/usersearch?q='+encodeURIComponent(q));
    if(!resp.ok){ results.classList.add('hidden'); results.innerHTML=''; return; }
    const data = await resp.json();
    results.innerHTML = data.map(u => `<button type='button' data-id='${u.id}' data-name='${u.name}' data-email='${u.email}' class='w-full text-left p-2 hover:bg-gray-100'>${u.name} <span class='text-xs text-gray-500'>${u.email}</span></button>`).join('');
    results.classList.remove('hidden');
  }

  input.addEventListener('input', e => search(e.target.value));

  results.addEventListener('click', e =>{
    const btn = e.target.closest('button');
    if(!btn) return;
    const id = btn.getAttribute('data-id');
    const name = btn.getAttribute('data-name');
    const email = btn.getAttribute('data-email');
    if(!chosen.has(id)){
      chosen.add(id);
      const chip = document.createElement('span');
      chip.className = 'px-2 py-1 bg-blue-100 rounded text-sm';
      chip.textContent = name + ' ('+email+')';
      selected.appendChild(chip);
      hidden.value = Array.from(chosen).join(',');
    }
  });
})();
</script>
}
