@*
    Reusable validation summary component
    
    Usage:
    @await Html.PartialAsync("~/Views/Shared/Partials/_ValidationSummary.cshtml")
    
    Requires:
    - TempData["ValidationErrors"] as JSON string (Dictionary<string, string[]>)
    - Or ViewData.ModelState for inline validation
*@
@using System.Text.Json

@{
    var validationErrors = new Dictionary<string, string[]>();
    if (TempData["ValidationErrors"] is string json && !string.IsNullOrWhiteSpace(json))
    {
        validationErrors = JsonSerializer.Deserialize<Dictionary<string, string[]>>(json) ?? new Dictionary<string, string[]>();
    }
    
    var modelStateErrors = ViewData.ModelState?
        .Where(x => x.Value?.Errors.Count > 0)
        .ToDictionary(
            kvp => kvp.Key,
            kvp => kvp.Value!.Errors.Select(e => e.ErrorMessage).ToArray()
        ) ?? new Dictionary<string, string[]>();
    
    var allErrors = validationErrors.Concat(modelStateErrors)
        .GroupBy(x => x.Key)
        .ToDictionary(g => g.Key, g => g.SelectMany(x => x.Value).Distinct().ToArray());
}

@if (allErrors.Any())
{
    <div class="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg mb-6" role="alert" aria-live="assertive">
        <div class="flex items-start gap-3">
            <svg class="w-5 h-5 text-red-600 dark:text-red-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
            <div class="flex-1">
                <h3 class="text-sm font-semibold text-red-800 dark:text-red-300 mb-1">
                    Please correct the following @(allErrors.Count == 1 ? "error" : "errors"):
                </h3>
                <ul class="text-sm text-red-700 dark:text-red-400 space-y-1">
                    @foreach (var error in allErrors.SelectMany(kvp => kvp.Value).Distinct())
                    {
                        <li>ï¿½ @error</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}
